// Dynasty Warriors 3
// #ID = 20722

// NOTE all code notes may change, please check RA for the latest code notes. 

onePlayerString = " [1P]"
asASinglePlayerString = " as a single player"


// Character enumeration
ZhaoYun = 0x00
GuanYu = 0x01
ZhangFei = 0x02
XiahouDun = 0x03
DianWei = 0x04
XuZhu = 0x05
ZhouYu = 0x06
LuXun = 0x07
TaishiCi = 0x08
DiaoChan = 0x09
ZhugeLiang = 0x0A
CaoCao = 0x0B
LuBu = 0x0C
SunShangXiang = 0x0D
LiuBei = 0x0E
SunJian = 0x0F
SunQuan = 0x10
DongZhuo = 0x11
YuanShao = 0x12
MaChao = 0x13
HuangZhong = 0x14
XiahouYuan = 0x15
ZhangLiao = 0x16
SimaYi = 0x17
LuMeng = 0x18
GanNing = 0x19
JiangWei = 0x1A
ZhangJiao = 0x1B
XuHuang = 0x1C
ZhangHe = 0x1D
ZhenJi = 0x1E
HuangGai = 0x1F
SunCe = 0x20
WeiYan = 0x21
PangTong = 0x22
MengHuo = 0x23
ZhuRong = 0x24
DaQiao = 0x25
XiaoQiao = 0x26
FuXi = 0x27
NuWa = 0x28

// Non playable characters
ChengYi = 0x29
HouXuan = 0x2a
ChengYin = 0x2b
YangQiu = 0x2c
LiKan = 0x2d
HanSui = 0x2e
CaoRen = 0x2f
ChengPu = 0x30
HanDang = 0x31
ZhangBao = 0x32
ZhangLiang = 0x33
ZhangManCheng = 0x34
BoZhang = 0x35
CaoHong = 0x36
YanLiang = 0x37
WenChou = 0x38
GongsunZan = 0x39
HuaXiong = 0x3a
XuRong = 0x3b
GaoShun = 0x3c
LiRi = 0x3d
LiJue = 0x3e
JiaXu = 0x3f
GuoSi = 0x40
HuZhen = 0x41
YuJin = 0x42
ChunYuqiong = 0x43
YueJin = 0x44
LiDian = 0x45
XiahouEn = 0x46
ChengYu = 0x47
XunYou = 0x48
ZhouTai = 0x49
LingTong = 0x4a
XuSheng = 0x4b
DingFeng = 0x4c
PangDe = 0x4d
HuangQuan = 0x4e
GuanXing = 0x4f
ZhangBao = 0x50
Shamoke = 0x51
DengAi = 0x52
MaDai = 0x53
GuanSuo = 0x54
YuanTan = 0x55
YuanXi = 0x56
YuanShang = 0x57
JuShou = 0x58
GaoLan = 0x59
ZhaoCen = 0x5A
NiouFu = 0x5B
FanChou = 0x5C
WangFang = 0x5D
LiMeng = 0x5E
HeJin = 0x5F
ZhuJun = 0x60
LuZhi = 0x61
HuangfuSong = 0x62
ZhangChao = 0x63
LiuYan = 0x64
ZouJing = 0x65
ChengYuanzhi = 0x66
DengMao = 0x67
GuanHai = 0x68
PeiYuanShao = 0x69
HeYi = 0x6A
YanZheng = 0x6B
GaoSheng = 0x6C
LiuYan = 0x6D
SongXian = 0x6E
WeiXu = 0x6F
ShiHuan = 0x70
LuWeiKuang = 0x71
XunChen = 0x72
HanMeng = 0x73
HanXun = 0x74
ZhouCang = 0x75
GuanPing = 0x76
SunQian = 0x77
MiZhu = 0x78
MiFang = 0x79
LiuFeng = 0x7A
LiaoHua = 0x7B
LiuQi = 0x7C
CaoPi = 0x7D
CaoZhang = 0x7E
ZhuHuan = 0x7F
ZhuRan = 0x80
JiangQin = 0x81
DongXi = 0x82
PanZhang = 0x83
YanYan = 0x84
WuLan = 0x85
LeiTong = 0x86
ZhangJi = 0x87
MaSu = 0x88
MaLiang = 0x89
LiHui = 0x8A
ZhangYi = 0x8B
WangPing = 0x8C
YongKai = 0x8D
GaoDing = 0x8E
ZhuBao = 0x8F
WuTugu = 0x90
MengYou = 0x91
DongTuNe = 0x92
AhuiNan = 0x93
KingDuosi = 0x94
DailaiDongzhu = 0x95
KingMulu = 0x96
MengJie = 0x97
ZhugeJin = 0x98
SunShao = 0x99
LiuBiao = 0x9A
MengDa = 0x9B
FaZheng = 0x9C
ChenShi = 0x9D
YangXiu = 0x9E
XiahouShang = 0x9F
XiahouDe = 0xA0
HanHan = 0xA1
DuXi = 0xA2
WenPin = 0xA3
CaiMao = 0xA4
XunYu = 0xA5
LuSu = 0xA6
LiuYong = 0xA7
ZhangYing = 0xA8
ChenHeng = 0xA9
YuMi = 0xAA
FanNeng = 0xAB
YanBaiHu = 0xAC
YanYu = 0xAD
WangLang = 0xAE
ZhouXin = 0xAF
ZhuZhi = 0xB0
QuanZong = 0xB1
JiaKui = 0xB2
CaoXiu = 0xB3
ManChong = 0xB4
ZhangPu = 0xB5
HuZhi = 0xB6
ZhouFang = 0xB7
LiuZhang = 0xB8
LiuHan = 0xB9
LengBao = 0xBA
ZhangRen = 0xBB
DengXian = 0xBC
LiYan = 0xBD
LiuXun = 0xBE
GaoXiang = 0xBF
CaoZhen = 0xC0
SunLii = 0xC1
XinPi = 0xC2
SimaZhao = 0xC3
MaYuanY = 0xC4
SunZhong = 0xC5
HanZhong = 0xC6
ZhaoHong = 0xC7
ChenZhen = 0xC8
JianYong = 0xC9
ZhuLing = 0xCA
KuaiLiang = 0xCB
LuGong = 0xCC
HuangZu = 0xCD
ZhangHu = 0xCE
ChenSheng = 0xCF
ZhangXiu = 0xD0
HuChuEr = 0xD1
CaoAng = 0xD2
CaoAnMin = 0xD3
YuanShu = 0xD4
CaoRui = 0xD5
ZhenJi2 = 0xD6 // Don't know why there is two of Zhen. 
Commander = 0xD7
CatapultChief = 0xD8
AssaultCaptain = 0xD9
GateCaptain = 0xDA
SupplyCaptain = 0xDB
BodyGuard = 0xDC
LtCommander = 0xDD
Captain = 0xDE
Carriage = 0xDF
Peasant = 0xE0
Bandit = 0xE1
Rogue = 0xE2
Pirate = 0xE3
Lieutenant = 0xE4
Private = 0xE5
Corporal = 0xE6
Sergeant = 0xE7
Major = 0xE8
Guard = 0xE9
GuardCaptain = 0xEA
LadyGuard = 0xEB
LadyCaptain = 0xEC
Bowman = 0xED
Crossbow = 0xEE
FirstCrossbow = 0xEF
GateGuard = 0xF0
Trooper = 0xF1
Captain = 0xF2
General = 0xF3
Bowman = 0xF4
FirstBow = 0xF5
LadyBowman = 0xF6
FirstLadyBow = 0xF7
Soldier = 0xF8
Warrior = 0xF9
NanmanElite = 0xFA
Bowman = 0xFB
BowCaptain = 0xFC
Amazoness = 0xFD
LadyGuard = 0xFE
NoGeneral = 0xFF

CharacterLookup = 
{
    ZhaoYun: "Zhao Yun",
    GuanYu: "Guan Yu",
    ZhangFei: "Zhang Fei",
    XiahouDun: "Xiahou Dun",
    DianWei: "Dian Wei",
    XuZhu: "Xu Zhu",
    ZhouYu: "Zhou Yu",
    LuXun: "Lu Xun",
    TaishiCi: "Taishi Ci",
    DiaoChan: "Diaochan",
    ZhugeLiang: "Zhuge Liang",
    CaoCao: "Cao Cao",
    LuBu: "Lu Bu",
    SunShangXiang: "Sun Shang Xiang",
    LiuBei: "Liu Bei",
    SunJian: "Sun Jian",
    SunQuan: "Sun Quan",
    DongZhuo: "Dong Zhuo",
    YuanShao: "Yuan Shao",
    MaChao: "Ma Chao",
    HuangZhong: "Huang Zhong",
    XiahouYuan: "Xiahou Yuan",
    ZhangLiao: "Zhang Liao",
    SimaYi: "Sima Yi",
    LuMeng: "Lu Meng",
    GanNing: "Gan Ning",
    JiangWei: "Jiang Wei",
    ZhangJiao: "Zhang Jiao",
    XuHuang: "Xu Huang",
    ZhangHe: "Zhang He",
    ZhenJi: "Zhen Ji",
    HuangGai: "Huang Gai",
    SunCe: "Sun Ce",
    WeiYan: "Wei Yan",
    PangTong: "Pang Tong",
    MengHuo: "Meng Huo",
    ZhuRong: "Zhu Rong",
    DaQiao: "Da Qiao",
    XiaoQiao: "Xiao Qiao",
    FuXi: "Fu Xi",
    NuWa: "Nu Wa",
}

// Faction IDs
NoFactionID = 0xff
HanForcesFactionID = 0x00 
AlliedForcesFactionID = 0x01 
WeiForcesFactionID = 0x02 
WuForcesFactionID = 0x03 
ShuForcesFactionID = 0x04 
YellowTurbansFactionID = 0x05 
NanmanForcesFactionID = 0x06 
CaoCaoForcesFactionID = 0x07 
SunJianForcesFactionID = 0x08 
SunCeForcesFactionID = 0x09 
SunQuanForcesFactionID = 0x0a 
LiuBeiForcesFactionID = 0x0b 
GuanYuForcesFactionID = 0x0c 
DongZhuoForcesFactionID = 0x0d 
YuanShaoForcesFactionID = 0x0e 
ZhangXiuForcesFactionID = 0x0f 
LiuBiaoForcesFactionID = 0x10 
LiuZhangForcesFactionID = 0x11 
BanditsFactionID = 0x12 
RoguesFactionID = 0x13 
PiratesFactionID = 0x14 

// Faction Names
FactionNameLookup = 
{
    HanForcesFactionID: "Han",
    AlliedForcesFactionID: "Allies",
    WeiForcesFactionID: "Wei",
    WuForcesFactionID: "Wu",
    ShuForcesFactionID: "Shu",
    YellowTurbansFactionID: "Yellow Turbans",
    NanmanForcesFactionID: "Nanman",
    CaoCaoForcesFactionID: "Cao Cao",
    SunJianForcesFactionID: "Sun Jian",
    SunCeForcesFactionID: "Sun Ce",
    SunQuanForcesFactionID: "Sun Quan",
    LiuBeiForcesFactionID: "Liu Bei",
    GuanYuForcesFactionID: "Guan Yu",
    DongZhuoForcesFactionID: "Dong Zhuo",
    YuanShaoForcesFactionID: "Yuan Shao",
    ZhangXiuForcesFactionID: "Zhang Xiu",
    LiuBiaoForcesFactionID: "Liu Biao",
    LiuZhangForcesFactionID: "Liu Zhang",
    BanditsFactionID: "Bandits",
    RoguesFactionID: "Rogues",
    PiratesFactionID: "Pirates",
}

FactionForcesLookup = 
{
    HanForcesFactionID: "Han Forces",
    AlliedForcesFactionID: "Allied Forces",
    WeiForcesFactionID: "Wei Forces",
    WuForcesFactionID: "Wu Forces",
    ShuForcesFactionID: "Shu Forces",
    YellowTurbansFactionID: "Yellow Turbans",
    NanmanForcesFactionID: "Nanman Forces",
    CaoCaoForcesFactionID: "Cao Cao's Forces",
    SunJianForcesFactionID: "Sun Jian's Forces",
    SunCeForcesFactionID: "Sun Ce's Forces",
    SunQuanForcesFactionID: "Sun Quan's Forces",
    LiuBeiForcesFactionID: "Liu Bei's Forces",
    GuanYuForcesFactionID: "Guan Yu's Forces",
    DongZhuoForcesFactionID: "Dong Zhuo's Forces",
    YuanShaoForcesFactionID: "Yuan Shao's Forces",
    ZhangXiuForcesFactionID: "Zhang Xiu's Forces",
    LiuBiaoForcesFactionID: "Liu Biao's Forces",
    LiuZhangForcesFactionID: "Liu Zhang's Forces",
    BanditsFactionID: "Bandits",
    RoguesFactionID: "Rogues",
    PiratesFactionID: "Pirates",
}

// Stage Indexs
YellowTurbanRebellionStageID = 0x00
BattleAtHuLaoGateStageID = 0x01
SurpriseAttackOnLiuBiaoStageID = 0x02
BattleAtWanCastleStageID = 0x03
AssaultOnTheWuTerritoryStageID = 0x04
BattleAtGuanDuStageID = 0x05
GuanYusEscapeStageID = 0x06
BattleOfChangBanStageID = 0x07
BattleOfChiBiStageID = 0x08
AssaultOnChengDuStageID = 0x09
BattleAtTongGateStageID = 0x0a
BattleAtHeFeiStageID = 0x0b
BattleAtFanCastleStageID = 0x0c
BattleOfMtDingJunStageID = 0x0d
BattleAtYiLingStageID = 0x0e
NanmanCampaignStageID = 0x0f
BattleOfJieTingStageID = 0x10
BattleAtYouTingStageID = 0x11
SiegeAtHeFeiCastleStageID = 0x12
BattleAtWuZhangPlainsStageID = 0x13
MountainBanditCampaignStageID = 0x14
RaidontheRogueFortressStageID = 0x15
PirateAttackontheHighSeasStageID = 0x16

StageLookup =
{
    YellowTurbanRebellionStageID: "Yellow Turban Rebellion", 
    BattleAtHuLaoGateStageID: "The Battle at Hu Lao Gate", 
    SurpriseAttackOnLiuBiaoStageID: "Surprise Attack on Liu Biao", 
    BattleAtWanCastleStageID: "The Battle at Wan Castle", 
    AssaultOnTheWuTerritoryStageID: "The Assault on the Wu Territory", 
    BattleAtGuanDuStageID: "The Battle at Guan Du", 
    GuanYusEscapeStageID: "Guan Yu's Escape", 
    BattleOfChangBanStageID: "The Battle of Chang Ban", 
    BattleOfChiBiStageID: "The Battle of Chi Bi", 
    AssaultOnChengDuStageID: "Assault on Cheng Du", 
    BattleAtTongGateStageID: "The Battle at Tong Gate", 
    BattleAtHeFeiStageID: "The Battle at He Fei", 
    BattleAtFanCastleStageID: "The Battle at Fan Castle", 
    BattleOfMtDingJunStageID: "The Battle of Mt Ding Jun", 
    BattleAtYiLingStageID: "The Battle at Yi Ling", 
    NanmanCampaignStageID: "The Nanman Campaign", 
    BattleOfJieTingStageID: "The Battle of Jie Ting", 
    BattleAtYouTingStageID: "The Battle at You Ting", 
    SiegeAtHeFeiCastleStageID: "Siege at He Fei Castle", 
    BattleAtWuZhangPlainsStageID: "The Battle at Wu Zhang Plains", 
    MountainBanditCampaignStageID: "The Mountain Bandit Campaign", 
    RaidontheRogueFortressStageID: "Raid on the Rogue Fortress", 
    PirateAttackontheHighSeasStageID: "Pirate Attack on the High Seas", 
}


// This is to use against checking the level cutscene flag, not the normal stage flag. 
ChallengeModeEnduranceLevelCutsceneID = 0x0A
ChallengeModeTimeAttackLevelCutsceneID = 0x15

ChallengeModeLookup = 
{
    ChallengeModeEnduranceLevelCutsceneID: "Endurance",
    ChallengeModeTimeAttackLevelCutsceneID: "Time Attack",
}


// Common Items ID 
SpeedScroll = 0x00
WingBoots = 0x01
DragonAmulet = 0x02
PeacockUrn = 0x03
TigerAmulet = 0x04
TortoiseAmulet = 0x05
HuangBow = 0x06
ShellArmor = 0x07
HornedHelmet = 0x08
CavalryArmor = 0x09
SevenStarOrb = 0x0a
WindScroll = 0x0b
Elixir = 0x0c

// Rare items ID
RedHare = 0x0d
HexMarkSaddle = 0x0e
ImperialSaddle = 0x0f
ArtOfWar = 0x10
BodyguardManual = 0x11
WayOfMusou = 0x12
SurvivalGuide = 0x13
Defender = 0x14
FireArrows = 0x15
Buckler = 0x16
PowerScroll = 0x17
GoldenHarness = 0x18

// Weapon Id 
Sword = 0x00
SteelSword = 0x01
BroadSword = 0x02
LongSword = 0x03
Scimitar = 0x04
GreatScimitar = 0x05
Spear = 0x06
LongSpear = 0x07
Halberd = 0x08
GreatHalberd = 0x09
HandAxe = 0x0A
StrikeAxe = 0x0B
Club = 0x0C
SpikedClub = 0x0D
TwinSabers = 0x0E
WingSabers = 0x0F
TwinRods = 0x10
SpiralRods = 0x11
Mace = 0x12
GreatMace = 0x13
WarFan = 0x14
WarlordFan = 0x15
Chakram = 0x16
CrescentChakram = 0x17
BattleAxe = 0x18
WarAxe = 0x19
BronzeClaw = 0x1A
SteelClaw = 0x1B
IronFlute = 0x1C
SteelFlute = 0x1D
IronRod = 0x1E
SteelRod = 0x1F
Tonfa = 0x20
StuddedTonfa = 0x21
DoubleVoulge = 0x22
StrikeVoulge = 0x23
Staff = 0x24
MirageStaff = 0x25
NanmanGauntlet = 0x26
BeastGauntlet = 0x27
Boomerang = 0x28
HawkBoomerang = 0x29
TwinFans = 0x2A
VioletFans = 0x2B
BastardSword = 0x2C
GreatSword = 0x2D
Rapier = 0x2E
SwiftRapier = 0x2F
DragonSpear = 0x30
BlueDragon = 0x31
SnakeBlade = 0x32
KirinSword = 0x33
Bull = 0x34
BoneCrusher = 0x35
ElderSword = 0x36
Eagle = 0x37
WolfSlayer = 0x38
GoldOrb = 0x39
WhiteFeather = 0x3A
SwordofHeaven = 0x3B
SkyPiercer = 0x3C
LunaChakram = 0x3D
GoldDragon = 0x3E
LoneWolf = 0x3F
KingWolf = 0x40
StarSword = 0x41
MasterSword = 0x42
SteelStallion = 0x43
SageSword = 0x44
DemonSword = 0x45
DragonBlade = 0x46
BlackFeather = 0x47
TigerHook = 0x48
RiverMaster = 0x49
Vapor = 0x4A
StaffofFire = 0x4B
Destroyer = 0x4C
PeacockClaw = 0x4D
MoonFlute = 0x4E
ShadowRod = 0x4F
Conqueror = 0x50
DoubleStar = 0x51
StaffofWind = 0x52
BeastMaster = 0x53
FireWheel = 0x54
Beauty = 0x55
Grace = 0x56
HolyAvenger = 0x57
CelestialBlade = 0x58
FierceDragon= 0x59
BlueMoonDragon= 0x5A
ViperBlade= 0x5B
KirinFang= 0x5C
MadBull= 0x5D
StoneCrusher= 0x5E
AncientsSword= 0x5F
Falcon= 0x60
TigerSlayer= 0x61
GoldGlobe= 0x62
PeacockFeather= 0x63
WrathOfHeaven= 0x64
SkyScorcher= 0x65
SolChakram= 0x66
GoldMoonDragon= 0x67
SavageWolf= 0x68
MasterWolf= 0x69
GrandStar= 0x6A
GrandMaster= 0x6B
SteelDragon= 0x6C
OracleSword= 0x6D
DemonFang= 0x6E
DragonBreath= 0x6F
DarkFeather= 0x70
WhiteTiger= 0x71
SeaMaster= 0x72
Blink= 0x73
VolcanoStaff= 0x74
Marauder= 0x75
PeacockTalon= 0x76
DarkMoonFlute= 0x77
BlackShadow= 0x78
Overlord= 0x79
DoubleComet= 0x7A
TornadoStaff= 0x7B
KingOfBeasts= 0x7C
MagmaWheel= 0x7D
TrueBeauty= 0x7E
TrueGrace= 0x7F
FuXisSword= 0x80
NuWasRapier= 0x81

// Gameplay Modes
MainMenu = 0x0 // not always, quick restarts will break this. 
MusouMode = 0x4
FreeMode = 0x7
VersusMode = 0x9
ChallengeMode = 0xa

DifficultyLookup = 
{
    0x00: "Easy",
    0x01: "Medium",
    0x02: "Hard"
}

// Helper function 
function ContainsKey(dictionary, key_name)
{
    for key in dictionary 
        if(key == key_name) return true
    return false
}

// $3ad288 (4-bit Low) Gameplay mode
// 
// This does not get cleared when returning to main menu with select+Start quick reset.
// 
// Note: This gets set for Demo Mode as well. 
// 
// 0x0 = Main Menu not always,  see 0x0036595c
// 0x4 = Musou Mode
// 0x7 = Free Mode
// 0x9 = Versus Mode
// 0xa = Challenge Mode
function GameplayMode() => low4(0x3ad288)

// $366400 (32-bit) Option Mode Indicator.
// 
// Pointer to some handler for the Option Mode.   This will be set to 0x8e8ac0
//  
// Changing this will break the game. Only used for Rich Presence. 
function OptionMode() => dword (0x366400)

function isOptionMode() => OptionMode() == 0x8e8ac0

// $3ad28c (8-bit) In-Game Difficulty Selection
// 
// 0x00 = Easy
// 0x01 = Normal
// 0x02 = Hard
function InGameDifficultySelection() => byte(0x3ad28c)

// $5ff761 (8-bit) Current Musou mode number of stages complete
// 
// This will be incremented 1 for each musou stage complete. 
// 
// When this hits 0x07 most characters will have finished musou mode. 
// Liu Bei, Sun Jian and Cao cao have 0x0a (10) stages. 
function CurrentStagesCompleteMusouMode() => byte(0x5ff761)

// $311FC4: (8-bit) Option menu: Difficulty selected.
//          
//          0x00 = Easy
//          0x01 = Normal
//          0x02 = Hard
function OptionDifficultyMenuSelected() => byte(0x311FC4)

// $3250AF: (3592-bit) Stored Array of Musou Stages for Post game result screen. (Note, it is not fully updated until you reach these screens. See 0x5ff7b7 for the current Musou information.   This probably should not be used.  Use 0x5ff7b7 instead.
//          
//          This is an off by one Note, Array start at 0x003250b0
//          
//          These arrays contain a 20 byte (20 * 8-bit) array of all of the generals killed during a Musou Stage (with 0xFF used when there's not enough generals to fill the list).  If the list is under 0x28 The character killed was a playable general (list on 00x5ff7b7)
//          
//          After that is 16 bits that details the KOs obtained in hex.  Followed by 80 bits (10 * 8-bits) of 00s (or at least 00s at this time) .
function MusouStagePostGameResultScreen() => byte(0x3250AF)

// $3258C8: (16-bits) Speed Scroll Owned Indicator Stored Database
//          
//          If this value is 0x0019 (ot 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x00, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function SpeedScrollOwned() => byte(0x3258C8)

// $3ad170: (24-bit) The pointer to the main character's stats
// 
//          Note if this is ever proven not to be the correct pointer, check out 0x003659c0, 0x0037b92c, 0x003c1f40, 0x50b300, and 0x0050b304.  Those had the same value to this at the time of discovery. 
//          
//          +0x051=(24-bit)Positional X representation of Main Character (West and east on map) 
//          +0x055=(24-bit)Positional Height Representation of Main Character (Jumping) 
//          +0x059=(24-bit)Positional Z Represnetation of main character(North and south on map) 
//          +0x204=(16-bit)Main Player Defense Powerup Time left.  (not seconds)
//          +0x21C=(16-bit)Main Player HP
//          +0x222=(16-bit)Main Player Musou amount
//          +0x230=(8-bit)Main Player Arrow count
function PointerToFirstPlayer() => tbyte(0x3ad170)
// $3ad1e4: (24-bit) The pointer to the second character's stats, see above at: 3ad170 for more info. 
function PointerToSecondPlayer() => tbyte(0x3ad1e4)

function offset_pointer(pointer, offset) => (pointer() + offset)

playerPointerOffsetToHP = 0x21c
playerPointerOffsetToMaxHP = 0x220

// $3ad144 [32-bit] K.O Count
// 
// This is the per stage Kill count of the first player.  This will be reset to 0 when entering a new stage. 
// 
// Honestly will never need more than 2000
function firstPlayerKills() => dword(0x3ad144)

// $3ad1b8 [32-bit] K.O Count for the second player
// 
// This is the per stage Kill count of the first player.  This will be reset to 0 when entering a new stage. 
function secondPlayerKills() => dword(0x3ad1b8)


function getFirstPlayerStageKillCount()
{
    return firstPlayerKills()
}

function getSecondPlayerStageKillCount()
{
    return secondPlayerKills()
}

function firstPlayerHalfHP() => 255 + word(offset_pointer(PointerToFirstPlayer, playerPointerOffsetToMaxHP)) - 
                                word(offset_pointer(PointerToFirstPlayer, playerPointerOffsetToHP)) * 2 > 255
function secondPlayerHalfHP() => word(offset_pointer(PointerToSecondPlayer, playerPointerOffsetToHP)) >
                                 word(offset_pointer(PointerToSecondPlayer, playerPointerOffsetToMaxHP)) / 2 

playerPointerXPositionOffset = 0x51 
playerPointerYPositionOffset = 0x55
playerPointerZPositionOffset = 0x59
function firstPlayerXPosition() => tbyte(offset_pointer(PointerToFirstPlayer, playerPointerXPositionOffset))
function firstPlayerYPosition() => tbyte(offset_pointer(PointerToFirstPlayer, playerPointerYPositionOffset))
function firstPlayerZPosition() => tbyte(offset_pointer(PointerToFirstPlayer, playerPointerZPositionOffset))

// $3253a8: (16-bit)  Zhao Yun's stored Max Health  

// Zhao Yun's Health will be defined by this when starting a Musou mode or Free mode.
ZhaoYunHealthLocation = 0x3253a8

// $3253aa: (16-bit)  Zhao Yun's stored Max Musou

// Zhao Yun's Musou will be defined by this when starting a Musou mode or Free mode.
ZhaoYunMusouLocation = 0x3253aa

// $3253c8: (16-bit)  Guan Yu's stored Max Health  

// The second in the array of characters health. 
GuanYuHealthLocation = 0x3253c8

SizeOfStoredCharacters = GuanYuHealthLocation - ZhaoYunHealthLocation

// $3258CA: (16-bits) Wing boots Owned Indicator Stored Database
//          
//          If this value is 0x0019 (ot 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x01, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function WingBootsOwned() => byte(0x3258CA)

// $3258CC: (16-bits) Dragon Amulet Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x02, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function DragonAmuletOwned() => byte(0x3258CC)

// $3258CE: (16-bits) Peacock Urn Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x03, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function PeacockUrnOwned() => byte(0x3258CE)

// $3258D0: (16-bits) Tiger Amulet Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x04, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function TigerAmuletOwned() => byte(0x3258D0)

// $3258D2: (16-bits) Tortoise Amulet Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x05, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function TortoiseAmuletOwned() => byte(0x3258D2)

// $3258D4: (16-bits) Huang's Bow Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x06, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function HuangBowOwned() => byte(0x3258D4)

// $3258D6: (16-bits) Shell Armor Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x07, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function ShellArmorOwned() => byte(0x3258D6)

// $3258D8: (16-bits) Horned Helmet Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x08, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function HornedHelmetOwned() => byte(0x3258D8)

// $3258DA: (16-bits) Cavalry Armor Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x09, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function CavalryArmorOwned() => byte(0x3258DA)

// $3258DC: (16-bits) Seven Star Orb Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0a, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function SevenStarOrbOwned() => byte(0x3258DC)

// $3258DE: (16-bits) Wind Scroll Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0b, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function WindScrollOwned() => byte(0x3258DE)

// $3258E0: (16-bits) Elixir Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0c, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function ElixirOwned() => byte(0x3258E0)

// $3258E2: (16-bits) Red Hare Saddle Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0d, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c7 for additional information
function RedHareOwned() => byte(0x3258E2)

// $3258E4: (16-bits) Hex Mark Saddle Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0e, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function HexMarkSaddleOwned() => byte(0x3258E4)

// $3258E6: (16-bits) Imperial Saddle Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0f, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function ImperialSaddleOwned() => byte(0x3258E6)

// $3258E8: (16-bits)The Art of War Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x10, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function ArtOfWarOwned() => byte(0x3258E8)

// $3258EA: (16-bits)Bodyguard Manual Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x11, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function BodyguardManualOwned() => byte(0x3258EA)

// $3258EC: (16-bits)The Way of the Musou Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x12, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
//          
//          0x13=Survival Guide
//          0x14=Defender
//          0x15=Fire Arrows
//          0x16=Buckler
//          0x17=Power Scroll
//          0x18=Golden Harness
function WayOfMusouOwned() => byte(0x3258EC)

// $3258EE: (16-bits)Survival Guide Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x13, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function SurvivalGuideOwned() => byte(0x3258EE)

// $3258F0: (16-bits)Defender Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x14, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function DefenderOwned() => byte(0x3258F0)

// $3258F2: (16-bits)Fire Arrows Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x15, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function FireArrowsOwned() => byte(0x3258F2)

// $3258F4: (16-bits)Buckler Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x16, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function BucklerOwned() => byte(0x3258F4)

// $3258F6: (16-bits)Power Scroll Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x17, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function PowerScrollOwned() => byte(0x3258F6)

// $3258F8: (16-bits)Golden Harness Owned Indicator Stored Database
//          
//          If this value is 0x0019 (or 8-bit 0x19) this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x18, but any number other than 0x19 is valid in-game.
//          
//          See 0x003258c
function GoldenHarnessOwned() => byte(0x3258F8)

// $325906: (16-bits) Iron Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0000, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fb for additional information
function IronSwordOwned() => word(0x325916)

// $325916: (16-bits) Steel Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0101, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fb for additional information
function SteelSwordOwned() => word(0x325916)

// $325926: (16-bits) Broad Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0202, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BroadSwordOwned() => word(0x325926)

// $325936: (16-bits) Long Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0303, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003259fb for additional information
function LongSwordOwned() => word(0x325936)

// $325946: (16-bits) Scimitar Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0404, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ScimitarOwned() => word(0x325946)

// $325956: (16-bits) Great Scimitar Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0505, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GreatScimitarOwned() => word(0x325956)

// $325966: (16-bits) Spear Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0606, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SpearOwned() => word(0x325966)

// $325976: (16-bits) Long Spear Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0707, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function LongSpearOwned() => word(0x325976)

// $325986: (16-bits) Halberd Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0808, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function HalbredOwned() => word(0x325986)

// $325996: (16-bits) Great Halberd Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0909, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GreatHalbredOwned() => word(0x325996)

// $3259A6: (16-bits) Hand Axe Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0a0a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function HandAxeOwned() => word(0x3259A6)

// $3259B6: (16-bits) Strike Axe Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0b0b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StrikeAxeOwned() => word(0x3259B6)

// $3259C6: (16-bits) Club Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0c0c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ClubOwned() => word(0x3259C6)

// $3259D6: (16-bits) Spiked Club Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0d0d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SpikedClubOwned() => word(0x3259D6)

// $3259E6: (16-bits) Twin Sabers Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0e0e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TwinSabersOwned() => word(0x3259E6)

// $3259F6: (16-bits) Wing Sabers Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x0f0f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WingSabersOwned() => word(0x3259F6)

// $325A06: (16-bits) Twin Rods Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1010, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TwinRodsOwned() => word(0x325A06)

// $325A16: (16-bits) Spiral Rods Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1111, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SpiralRodsOwned() => word(0x325A16)

// $325A26: (16-bits) Mace Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1212, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MaceOwned() => word(0x325A26)

// $325A36: (16-bits) Great Mace Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1313, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GreatMaceOwned() => word(0x325A36)

// $325A46: (16-bits) War Fan Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1414, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WarFanOwned() => word(0x325A46)

// $325A56: (16-bits) Warlord Fan Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1515, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WarlordFanOwned() => word(0x325A56)

// $325A66: (16-bits) Chakram Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1616, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ChakramOwned() => word(0x325A66)

// $325A76: (16-bits) Crescent Chakram Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1717, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function CrescentChakramOwned() => word(0x325A76)

// $325A86: (16-bits) Battle Axe Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1818, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BattleAxeOwned() => word(0x325A86)

// $325A96: (16-bits) War Axe Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1919, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WarAxeOwned() => word(0x325A96)

// $325AA6: (16-bits) Bronze Claw Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1a1a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BronzeClawOwned() => word(0x325AA6)

// $325AB6: (16-bits) Steel Claw Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1b1b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SteelClawOwned() => word(0x325AB6)

// $325AC6: (16-bits) Iron Flute Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1c1c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function IronFluteOwned() => word(0x325AC6)

// $325AD6: (16-bits) Steel Flute Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1d1d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SteelFluteOwned() => word(0x325AD6)

// $325AE6: (16-bits) Iron Rod Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1e1e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function IronRodOwned() => word(0x325AE6)

// $325AF6: (16-bits) Steel Rod Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x1f1f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SteelRodOwned() => word(0x325AF6)

// $325B06: (16-bits) Tonfa Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2020, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TonfaOwned() => word(0x325B06)

// $325B16: (16-bits) Studded Tonfa Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2121, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StuddedTonfaOwned() => word(0x325B16)

// $325B26: (16-bits) Double Voulge Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2222, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DoubleVolugeOwned() => word(0x325B26)

// $325B36: (16-bits) Strike Voulge Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2323, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StrikeVoulgeOwned() => word(0x325B36)

// $325B46: (16-bits) Staff Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2424, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StaffOwned() => word(0x325B46)

// $325B56: (16-bits) Mirage Staff Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2525, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MirageStaffOwned() => word(0x325B56)

// $325B66: (16-bits) Nanman Gauntlet Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2626, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function NanmanGauntletOwned() => word(0x325B66)

// $325B76: (16-bits) Beast Gauntlet Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2727, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BeastGauntletOwned() => word(0x325B76)

// $325B86: (16-bits) Boomerang Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2828, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BoomerangOwned() => word(0x325B86)

// $325B96: (16-bits) Hawk Boomerang Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2929, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function HawkBoomerangOwned() => word(0x325B96)

// $325BA6: (16-bits) Twin Fans Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2a2a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TwinFansOwned() => word(0x325BA6)

// $325BB6: (16-bits) Violet Fans Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2b2b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function VioletFansOwned() => word(0x325BB6)

// $325BC6: (16-bits) Bastard Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2c2c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BastardSwordOwned() => word(0x325BC6)

// $325BD6: (16-bits) Great Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2d2d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GreatSwordOwned() => word(0x325BD6)

// $325BE6: (16-bits) Rapier Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2e2e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function RapierOwned() => word(0x325BE6)

// $325BF6: (16-bits) Swift Rapier Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x2f2f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SwiftRapierOwned() => word(0x325BF6)

// $325C06: (16-bits) Dragon Spear Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3030, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DragonSpearOwned() => word(0x325C06)

// $325C16: (16-bits) Blue Dragon Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3131, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BlueDragonOwned() => word(0x325C16)

// $325C26: (16-bits) Snake Blade Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3232, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SnakeBladeOwned() => word(0x325C26)

// $325C36: (16-bits) Kirin Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3333, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function KirinSwordOwned() => word(0x325C36)

// $325C46: (16-bits) Bull Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3434, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BullOwned() => word(0x325C46)

// $325C56: (16-bits) Bone Crusher Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3535, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BoneCrushedOwned() => word(0x325C56)

// $325C66: (16-bits) Elder Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3636, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ElderSwordOwned() => word(0x325C66)

// $325C76: (16-bits) Eagle Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3737, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function EagleOwned() => word(0x325C76)

// $325C86: (16-bits) Wolf Slayer Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3838, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WolfSlayerOwned() => word(0x325C86)

// $325C96: (16-bits) Gold Orb Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3939, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GoldenOrbOwned() => word(0x325C96)

// $325CA6: (16-bits) White Feather Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3a3a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WhiteFeatherOwned() => word(0x325CA6)

// $325CB6: (16-bits) Sword of Heaven Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3b3b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SwordOfHeavenOwned() => word(0x325CB6)

// $325CC6: (16-bits) Sky Piercer Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3c3c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SkyPiercerOwned() => word(0x325CC6)

// $325CD6: (16-bits) Luna Chakram Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3d3d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function LunaChakramOwned() => word(0x325CD6)

// $325CE6: (16-bits) Gold Dragon Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3e3e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GoldDragonOwned() => word(0x325CE6)

// $325CF6: (16-bits) Lone Wolf Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x3f3f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function LoneWolfOwned() => word(0x325CF6)

// $325D06: (16-bits) King Wolf Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4040, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function KingWolfOwned() => word(0x325D06)

// $325D16: (16-bits) Star Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4141, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StarSwordOwned() => word(0x325D16)

// $325D26: (16-bits) Master Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4242, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MasterSwordOwned() => word(0x325D26)

// $325D36: (16-bits) Steel Stallion Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4343, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SteelStallionOwned() => word(0x325D36)

// $325D46: (16-bits) Sage Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4444, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SageSwordOwned() => word(0x325D46)

// $325D56: (16-bits) Demon Sword Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4545, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DemonSwordOwned() => word(0x325D56)

// $325D66: (16-bits) Dragon Blade Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4646, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DragonBladeOwned() => word(0x325D66)

// $325D76: (16-bits) Black Feather Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4747, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BlackFeatherOwned() => word(0x325D76)

// $325D86: (16-bits) Tiger Hook Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4848, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TigerHookOwned() => word(0x325D86)

// $325D96: (16-bits) River Master Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4949, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function RiverMasterOwned() => word(0x325D96)

// $325DA6: (16-bits) Vapor Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4a4a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function VaporOwned() => word(0x325DA6)

// $325DB6: (16-bits) Staff of Fire Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4b4b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StaffOfFireOwned() => word(0x325DB6)

// $325DC6: (16-bits) Destroyer Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4c4c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DestroyerOwned() => word(0x325DC6)

// $325DD6: (16-bits) Peacock Claw Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4d4d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function PeacockClawOwned() => word(0x325DD6)

// $325DE6: (16-bits) Moon Flute Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4e4e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MoonFluteOwned() => word(0x325DE6)

// $325DF6: (16-bits) Shadow Rod Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x4f4f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ShadowRodOwned() => word(0x325DF6)

// $325E06: (16-bits) Conqueror Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5050, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ConquerorOwned() => word(0x325E06)

// $325E16: (16-bits) Double Star Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5151, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DoubleStarOwned() => word(0x325E16)

// $325E26: (16-bits) Staff of Wind Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5252, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StaffOfWindOwned() => word(0x325E26)

// $325E36: (16-bits) Beast Master Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5353, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BeastMasterOwned() => word(0x325E36)

// $325E46: (16-bits) Fire Wheel Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5454, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function FireWheelOwned() => word(0x325E46)

// $325E56: (16-bits) Beauty Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5555, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BeautyOwned() => word(0x325E56)

// $325E66: (16-bits) Grace Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5656, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GraceOwned() => word(0x325E66)

// $325E76: (16-bits) Holy Avenger Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5757, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function HolyAvengerOwned() => word(0x325E76)

// $325E86: (16-bits) Celestial Blade Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5858, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function CelestialBladeOwned() => word(0x325E86)

// $325E96: (16-bits) Fierce Dragon (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5959, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function FierceDragonOwned() => word(0x325E96)

// $325EA6: (16-bits) Blue Moon Dragon (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5a5a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BlueMoonDragonOwned() => word(0x325EA6)

// $325EB6: (16-bits) Viper Blade (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5b5b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function ViperBladeOwned() => word(0x325EB6)

// $325EC6: (16-bits) Kirin Fang (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5c5c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function KirinFangOwned() => word(0x325EC6)

// $325ED6: (16-bits) Mad Bull (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5d5d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MadBullOwned() => word(0x325ED6)

// $325EE6: (16-bits) Stone Crusher (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5e5e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function StoneCrusherOwned() => word(0x325EE6)

// $325EF6: (16-bits) Ancient's Sword (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x5f5f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function AncientsSwordOwned() => word(0x325EF6)

// $325F06: (16-bits) Falcon (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6060, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function FalconOwned() => word(0x325F06)

// $325F16: (16-bits) Tiger Slayer (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6161, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TigerSlayerOwned() => word(0x325F16)

// $325F26: (16-bits) Gold Globe (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6262, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GoldGlobeOwned() => word(0x325F26)

// $325F36: (16-bits) Peacock Feather (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6363, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function PeacockFeatherOwned() => word(0x325F36)

// $325F46: (16-bits) Wrath of Heaven (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6464, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WrathOfHeavenOwned() => word(0x325F46)

// $325F56: (16-bits) Sky Scorcher (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6565, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SkyScorcherOwned() => word(0x325F56)

// $325F66: (16-bits) Sol Chakram (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6666, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SolChakramOwned() => word(0x325F66)

// $325F76: (16-bits) Gold Moon Dragon (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6767, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GoldMoonDragonOwned() => word(0x325F76)

// $325F86: (16-bits) Savage Wolf (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6868, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SavageWolfOwned() => word(0x325F86)

// $325F96: (16-bits) Master Wolf (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6969, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MasterWolfOwned() => word(0x325F96)

// $325FA6: (16-bits) Grand Star (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6a6a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GrandStarOwned() => word(0x325FA6)

// $325FB6: (16-bits) Grand Master (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6b6b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function GrandMasterOwned() => word(0x325FB6)

// $325FC6: (16-bits) Steel Dragon (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6c6c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SteelDragonOwned() => word(0x325FC6)

// $325FD6: (16-bits) Oracle Sword (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6d6d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function OracleSwordOwned() => word(0x325FD6)

// $325FE6: (16-bits) Demon Fang (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6e6e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DemonFangOwned() => word(0x325FE6)

// $325FF6: (16-bits) Dragon Breath (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x6f6f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DragonBreathOwned() => word(0x325FF6)

// $326006: (16-bits) Dark Feather (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7070, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DarkFeatherOwned() => word(0x326006)

// $326016: (16-bits) White Tiger (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7171, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function WhiteTigerOwned() => word(0x326016)

// $326026: (16-bits) Sea Master (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7272, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function SeaMasterOwned() => word(0x326026)

// $326036: (16-bits) Blink (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7373, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BlinkOwned() => word(0x326036)

// $326046: (16-bits) Volcano Staff (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7474, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function VolcanoStaffOwned() => word(0x326046)

// $326056: (16-bits) Marauder (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7575, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MarauderOwned() => word(0x326056)

// $326066: (16-bits) Peacock Talon (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7676, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function PeacockTalonOwned() => word(0x326066)

// $326076: (16-bits) Dark Moon Flute (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7777, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DarkMoonFluteOwned() => word(0x326076)

// $326086: (16-bits) Black Shadow (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7878, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function BlackShadowOwned() => word(0x326086)

// $326096: (16-bits) Overlord (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7979, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function OverlordOwned() => word(0x326096)

// $3260A6: (16-bits) Double Comet (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7a7a, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function DoubleCometOwned() => word(0x3260A6)

// $3260B6: (16-bits) Tornado Staff (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7b7b, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TornadoStaffOwned() => word(0x3260B6)

// $3260C6: (16-bits) King of Beasts (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7c7c, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function KingOfBeastsOwned() => word(0x3260C6)

// $3260D6: (16-bits) Magma Wheel (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7d7d, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function MagmaWheelOwned() => word(0x3260D6)

// $3260E6: (16-bits) True Beauty (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7e7e, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TrueBeautyOwned() => word(0x3260E6)

// $3260F6: (16-bits) True Grace (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x7f7f, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function TrueGraceOwned() => word(0x3260F6)

// $326106: (16-bits) Fu Xi's Sword (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x8080, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function FuXisSwordOwned() => word(0x326106)

// $326116: (16-bits) Nu Wa's Rapier (Unique) Owned Indicator Stored Database
//          
//          If this value is 0x8200 this item is not owned, any other value means it's owned.
//          
//          Most likely it will be 0x8181, but any number other than 0x8200 is valid in-game.
//          
//          See 0x003258fa for additional information
function NuWasRapierOwned() => word(0x326116)

// Needs to be here due to using the memory location names. 

TierOneWeapons = 
[
    IronSwordOwned,
    BroadSwordOwned,
    ScimitarOwned,
    SpearOwned,
    HalbredOwned,
    HandAxeOwned,
    ClubOwned,
    TwinSabersOwned,
    TwinRodsOwned,
    MaceOwned,
    WarFanOwned,
    ChakramOwned,
    BattleAxeOwned,
    BronzeClawOwned,
    IronFluteOwned,
    IronRodOwned,
    TonfaOwned,
    DoubleVolugeOwned,
    StaffOwned,
    NanmanGauntletOwned,
    BoomerangOwned,
    TwinFansOwned,
    BastardSwordOwned,
    RapierOwned,
]

TierTwoWeapons = 
[
    SteelSwordOwned,
    LongSwordOwned,
    GreatScimitarOwned,
    LongSpearOwned,
    GreatHalbredOwned,
    StrikeAxeOwned,
    SpikedClubOwned,
    WingSabersOwned,
    SpiralRodsOwned,
    GreatMaceOwned,
    WarlordFanOwned,
    CrescentChakramOwned,
    WarAxeOwned,
    SteelClawOwned,
    SteelFluteOwned,
    SteelRodOwned,
    StuddedTonfaOwned,
    StrikeVoulgeOwned,
    MirageStaffOwned,
    BeastGauntletOwned,
    HawkBoomerangOwned,
    VioletFansOwned,
    GreatSwordOwned,
    SwiftRapierOwned,
]

TierThreeWeapons = 
[
    DragonSpearOwned,
    BlueDragonOwned,
    SnakeBladeOwned,
    KirinSwordOwned,
    BullOwned,
    BoneCrushedOwned,
    ElderSwordOwned,
    EagleOwned,
    WolfSlayerOwned,
    GoldenOrbOwned,
    WhiteFeatherOwned,
    SwordOfHeavenOwned,
    SkyPiercerOwned,
    LunaChakramOwned,
    GoldDragonOwned,
    LoneWolfOwned,
    KingWolfOwned,
    StarSwordOwned,
    MasterSwordOwned,
    SteelStallionOwned,
    SageSwordOwned,
    DemonSwordOwned,
    DragonBladeOwned,
    BlackFeatherOwned,
    TigerHookOwned,
    RiverMasterOwned,
    VaporOwned,
    StaffOfFireOwned,
    DestroyerOwned,
    PeacockClawOwned,
    MoonFluteOwned,
    ShadowRodOwned,
    ConquerorOwned,
    DoubleStarOwned,
    StaffOfWindOwned,
    BeastMasterOwned,
    FireWheelOwned,
    BeautyOwned,
    GraceOwned,
    HolyAvengerOwned,
    CelestialBladeOwned,
]

TierFourWeapons = 
[
    FierceDragonOwned, 
    BlueMoonDragonOwned, 
    ViperBladeOwned, 
    KirinFangOwned, 
    MadBullOwned, 
    StoneCrusherOwned, 
    AncientsSwordOwned, 
    FalconOwned, 
    TigerSlayerOwned, 
    GoldGlobeOwned, 
    PeacockFeatherOwned, 
    WrathOfHeavenOwned, 
    SkyScorcherOwned, 
    SolChakramOwned, 
    GoldMoonDragonOwned, 
    SavageWolfOwned, 
    MasterWolfOwned, 
    GrandStarOwned, 
    GrandMasterOwned, 
    SteelDragonOwned, 
    OracleSwordOwned, 
    DemonFangOwned, 
    DragonBreathOwned, 
    DarkFeatherOwned, 
    WhiteTigerOwned, 
    SeaMasterOwned, 
    BlinkOwned, 
    VolcanoStaffOwned, 
    MarauderOwned, 
    PeacockTalonOwned, 
    DarkMoonFluteOwned, 
    BlackShadowOwned, 
    OverlordOwned, 
    DoubleCometOwned, 
    TornadoStaffOwned, 
    KingOfBeastsOwned, 
    MagmaWheelOwned, 
    TrueBeautyOwned, 
    TrueGraceOwned, 
    FuXisSwordOwned, 
    NuWasRapierOwned, 
]
// $326158: (8-bit) Zhao Yun's Stored Unlocked Status (Assumed)
//          
//          Note: Zhao Yun will be unlocked, even if this is 0 if no other character is available
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhaoYunUnlocked() => byte(0x326158)

// $326159: (8-bit) Guan Yu's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function GuanYuUnlocked() => byte(0x326159)

// $32615A: (8-bit) Zhang Fei's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhangFeiUnlocked() => byte(0x32615A)

// $32615B: (8-bit) Xiahou Dun's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function XiahouDunUnlocked() => byte(0x32615B)

// $32615C: (8-bit) Dian Wei's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function DianWeiUnlocked() => byte(0x32615C)

// $32615D: (8-bit) Xu Zhu's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function XuZhuUnlocked() => byte(0x32615D)

// $32615E: (8-bit) Zhou Yu's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhouYunUnlocked() => byte(0x32615E)

// $32615F: (8-bit) Lu Xun's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function LuXunUnlocked() => byte(0x32615F)

// $326160: (8-bit) Taishi Ci's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function TaishiCiUnlocked() => byte(0x326160)

// $326161: (8-bit) Diao Chan's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function DiaoChanUnlocked() => byte(0x326161)

// $326162: (8-bit) Zhuge Liang's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhugeLiangUnlocked() => byte(0x326162)

// $326163: (8-bit) Cao Cao's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function CaoCaoUnlocked() => byte(0x326163)

// $326164: (8-bit) Lu Bu's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function LuBuUnlocked() => byte(0x326164)

// $326165: (8-bit) Sun Shang Xiang's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function SunShangXiangUnlocked() => byte(0x326165)

// $326166: (8-bit) Liu Bei Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function LiuBeiUnlocked() => byte(0x326166)

// $326167: (8-bit) Sun Jian's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function SunJianUnlocked() => byte(0x326167)

// $326168: (8-bit) Sun Quan's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function SunQuanUnlocked() => byte(0x326168)

// $326169: (8-bit) Dong Zhuo's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function DongZhuoUnlocked() => byte(0x326169)

// $32616A: (8-bit) Yuan Shao's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function YuanShaoUnlocked() => byte(0x32616A)

// $32616B: (8-bit) Ma Chao's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function MaChaoUnlocked() => byte(0x32616B)

// $32616C: (8-bit) Huang Zhong's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function HuangZhongUnlocked() => byte(0x32616C)

// $32616D: (8-bit) Xiahou Yuan's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function XiahouYuanUnlocked() => byte(0x32616D)

// $32616E: (8-bit) Zhang Liao's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhangLiaoUnlocked() => byte(0x32616E)

// $32616F: (8-bit) Sima Yi's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function SimaYiUnlocked() => byte(0x32616F)

// $326170: (8-bit) Lu Meng's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function LuMengUnlocked() => byte(0x326170)

// $326171: (8-bit) Gan Ning's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function GanNingUnlocked() => byte(0x326171)

// $326172: (8-bit) Jiang Wei's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function JiangWeiUnlocked() => byte(0x326172)

// $326173: (8-bit) Zhang Jiao's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhangJiaoUnlocked() => byte(0x326173)

// $326174: (8-bit) Xu Huang's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function XuHuangUnlocked() => byte(0x326174)

// $326175: (8-bit) Zhang He's Stored Unlocked Status
//          
//          Defaults to 1 on first boot.
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhangHeUnlocked() => byte(0x326175)

// $326176: (8-bit) Zhen Ji's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhenJiUnlocked() => byte(0x326176)

// $326177: (8-bit) Huang Gai's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function HuangGaiUnlocked() => byte(0x326177)

// $326178: (8-bit) Sun Ce's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function SunCeUnlocked() => byte(0x326178)

// $326179: (8-bit) Wei Yan's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function WeiYanUnlocked() => byte(0x326179)

// $32617A: (8-bit) Pang Tong's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function PangTongUnlocked() => byte(0x32617A)

// $32617B: (8-bit) Meng Huo's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function MengHuoUnlocked() => byte(0x32617B)

// $32617C: (8-bit) Zhu Rong's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function ZhuRongUnlocked() => byte(0x32617C)

// $32617D: (8-bit) Da Qiao's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function DaQiaoUnlocked() => byte(0x32617D)

// $32617E: (8-bit) Xiao Qiao's Stored Unlocked Status
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function XiaoQiaoUnlocked() => byte(0x32617E)

// $32617F: (8-bit) Fu Xi's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function FuXiUnlocked() => byte(0x32617F)

// $326180: (8-bit) Nu wa's Stored Unlocked Status
//          
//          This character does not appear in Musou Mode
//          
//          Values:
//          0x00 =Locked
//          0x01= Unlocked
function NuWaUnlocked() => byte(0x326180)

// $365648: (8-bit) Current Level ID
//          
//          Also visible at 0x00365bf0, 0x0036640c, 0x00366904, 0x003ad10d
//          Note: This is stale on the main menu. 
// 
//          0x00 = The Yellow Turban Rebellion
//          0x01 = The Battle at Hu Lao Gate
//          0x02 = Surprise Attack on Liu Biao
//          0x03 = The Battle at Wan Castle
//          0x04 = Assault on The Wu Territory
//          0x05 = The Battle at Guan Du
//          0x06 = Guan Yu's Escape
//          0x07 = The Battle of Chang Ban
//          0x08 = The Battle of Chi Bi
//          0x09 = Assault on Cheng Du
//          0x0a = The Battle at Tong Gate
//          0x0b = The Battle at He Fei
//          0x0c = The Battle at Fan Castle
//          0x0d = The Battle of Mt. Ding Jun
//          0x0e = The Battle at Yi Ling
//          0x0f = The Nanman Campaign
//          0x10 =The Battle of Jie Ting
//          0x11 = The Battle at You Ting
//          0x12 = The Siege at He Fei Castle
//          0x13 = The Battle at Wu Zhang Plains
function CurrentLevelPauseID() => byte(0x365648)

// $3ad276: (8-bit) Number of items collected during the stage. 
// 
// Data about the items collected is located at 0x003ad208
function NumbeOfItemsCollectedInStage() => byte(0x3ad276)

// $3ad208: (8-bit) ID of First Item dropped in current stage 
// 
// Beginning of an array 16-bit values, ID and Strength, array has unknown length, signified by size at 0x003ad276
MemoryLocationOfFirstInStageItemCollected = 0x3ad208  // This is intentionally not an accessor. 

SizeOfInGameItemDrop = 2  // Shave and a hair cut 2 bytes!

// $3ad27c: (8-bit) Number of weapons collected during the stage. 
// 
// Data for the specific items appears to be at 0x003ad214 (at least the ids are there).  based on the same layout as weapon ownership. 
function NumbeOfWeaponsCollectedInStage() => byte(0x003ad27c)

// $3ad214 (8-bit) First weapon collected in stage gameplay's item id.  This is similar to how collected items appear in the stored array, for more information see: 0x003258fa 
//
// This is part of an array of all weapons that are earned in the stage, the length of the array is set at 0x003ad27c
MemoryLocationOfFirstInStageWeaponCollected = 0x003ad21f  // This is intentionally not an accessor. 

SizeOfInGameWeaponDrop = 16


// $3656F0: (8-bit) Menu/Cutscene indicator
//          
//          Possibly "Simulator paused" value
//          
//          0x00 Gameplay/post game/pre-game
//          0x01 Menu or cutscene.
function MenuCutsceneIndicator() => byte(0x3656F0)

// $3657E8: (8-bit) Current Stage ID
//          NOTE THIS HAS BEEN PROVEN FALSE! This value stayed at 0x14 when finishing Sun Shang Xiang's first level on hard in musou mode.   We have a better detector now at 0x00366bcc
//          This value Moves to 0x17 when game over (end of Musou or Game Over) or changing level.
//          
//          Correct Stage ID can be found at 0x00365648, 0x00365bf0, 0x0036640c, 0x00366904, 0x003ad10d
function CurrentStageID() => byte(0x003657e8)

END_OF_STAGE_STAGE_ID = 0x17

// 0x00365778 (8-bit) Player's faction during stage.
// 
// Changing this modifies the team's name on the pause menu. 
// 
// 
// Values:
// 0x00 = Han Forces
// 0x01 = Allied Forces
// 0x02 = Wei Forces
// 0x03 = Wu Forces
// 0x04 = Shu Forces
// 0x05 = Yellow Turbans
// 0x06 = Nanman Forces
// 0x07 = Cao Cao's Forces
// 0x08 = Sun Jian's Forces
// 0x09 = Sun Ce's Forces
// 0x0a = Sun Quan's Forces
// 0x0b = Liu Bei's Forces
// 0x0c = Guan Yu's Forces
// 0x0d = Dong Zhuo's Forces
// 0x0e = Yuan Shao's Forces
// 0x0f = Zhang Xiu's Forces
// 0x10 = Liu Biao's Forces
// 0x11 = Liu Zhang's Forces
// 0x12 = Bandits
// 0x13 = Rogues
// 0x14 = Pirates 
// 
// The final three are not used by the player.
function CurrentPlayerFactionID() => byte(0x00365778)

// $3ad10d: (8-bit) Level ID for cutscenes
// 
// Mirrored by 0x00365bf0, 0x0036640c, 0x00366904, 0x003ad10d
// 
// This defines the first cutscenes inside a stage, such as the intro scene that plays as the stage start (0x03 cutscene id) 
// 
// So if this is 0x013 you'll see Wu Zhange Plains cutscenes even if you're in Battle of Hu Lao Gate.
// 
// The cutscenes being displayed is located at: 0x00382d90
// 
// 0x00 = The Yellow Turban Rebellion
// 0x01 = The Battle at Hu Lao Gate
// 0x02 = Surprise Attack on Liu Biao
// 0x03 = The Battle at Wan Castle
// 0x04 = Assault on The Wu Territory
// 0x05 = The Battle at Guan Du
// 0x06 = Guan Yu's Escape
// 0x07 = The Battle of Chang Ban
// 0x08 = The Battle of Chi Bi
// 0x09 = Assault on Cheng Du
// 0x0a = The Battle at Tong Gate
// 0x0b = The Battle at He Fei
// 0x0c = The Battle at Fan Castle
// 0x0d = The Battle of Mt. Ding Jun
// 0x0e = The Battle at Yi Ling
// 0x0f = The Nanman Campaign
// 0x10 =The Battle of Jie Ting
// 0x11 = The Battle at You Ting
// 0x12 = The Siege at He Fei Castle
// 0x13 = The Battle at Wu Zhang Plains
// 
// For some reason these values are set in Challenge modes. 
// 0x0a = Endurance
// 0x15= Time Attack
function CurrentCutsceneLevelIndex() => byte(0x003ad10d)


// $3ad12f: (8-bit) First General killed in current battle
// 
// Killing the same general more than once is counted only one time
//
// See note at 0x003ad12f for list of values. 
MemoryLocationOfFirstInStageGeneralKill = 0x3ad12f
LengthOfKilledOfficerArray = 20
SizeOfKilledGenerals = 1  // 1 byte


// $5ff7b8: [8-bit] Stored value for the first General Killed for the first stage. This extends to the next 19 bytes for each additional named character killed. 
//
// 0xff if not set, 
//
// See 0x005ff7b7 for more information
MemoryLocationOfPostGameGeneralKilledArrayFirstStage = 0x5ff7b8

// 0x005ff7cc: (32-bit) The First Stage's KOs for the current musou mode.
//
// If the current player has beaten enough stages, this value will be set to what the main player has earned.  The second player KO total appears to be lost.  If the player hasn't beaten X stages this will be set to 0. 
//
// Note this can go stale on the main menu. 
MemoryLocationOfFirstStagesKOTotal = 0x5ff7cc

// 0x005ff7ec: (32-bit) The Second Stage's KOs for the current musou mode.
// 
// If the current player has beaten enough stages, this value will be set to what the main player has earned.  The second player KO total appears to be lost.  If the player hasn't beaten X stages this will be set to 0. 
// 
// Note this can go stale on the main menu. 
MemoryLocationOfSecondStagesKOTotal = 0x5ff7ec
SizeOfPostGameStageData = MemoryLocationOfSecondStagesKOTotal - MemoryLocationOfFirstStagesKOTotal

// $382d90: (8-bit) Cutscene Index for Character Intro/Defeat scene. 
// 
// Seems to use 0x003ad10d to determine which stage's cutscenes will play.
// 
// Critical values: 
// 0x00 = Character intro
// 0x01 Defeat scene
// 0x03= Intro scene to each level
// 
// Additional values: 
// 0x04= Zhuge Liang Casting magic in Chi Bi 
// 0x07= is the fire attack for the Wu/Shu side of the Chi Bi level
// 0x0a="You flaming idiots" in Yellow Turban mission
// 0x0a=Siege weapons/ Assault weapons at Hu Lao Gate 
// 0x0b="Feel the power of my Magic" in Yellow Turban Mission
// 0x0b=Notice the wind as a Shu character in Chi Bi 
function CutsceneIndex() => byte(0x382d90)

VALUE_FOR_INTRO_SCENE = 0x03
VALUE_FOR_CHIBI_FIRE_SCENE = 0x07 

// $3659EC: (8-bit) Cutscene indicator
//          
//          If this is incorrect, check 0x003829c2
//          
//          Values:
//          0x00=Not in cutscene
//          0x01=In Cutscene
function CutsceneIndicator() => byte(0x3659EC)

VALUE_FOR_CUTSCENE_PLAYING = 0x01

// $3ad100: (32-bit) Time spent in a stage in 60th of seconds. 
//
// Counts up, but represented in the pause menu as Time Remaining (decremented from 90 minutes)
// Note: This is really frame count, but apparently the math assumes 60 frames a second.
function FramesElapsedInStage() => dword(0x3ad100)

// $3ad150: (32-bit) First player's Number of Experience during and after stage. 
//
// This does not change during the stage or in the post game information until after the player saves the game. 
//
// Note: going to very high numbers appears to roll over the display. 
function FirstPlayerExperienceAmount() => dword(0x3ad150)

// $3ad1c4: (32-bit) Second player's Number of Experience during and after stage. 
//
// This does not change during the stage or in the post game information until after the player saves the game. 
//
// Note: going to very high numbers appears to roll over the display. 
function SecondPlayerExperienceAmount() => dword(0x003ad1c4)

// $3ad178: (8-bit) Current character ID for First Player. 
// 
// Note: Updated after choosing your character on the Character Carousel
// 
// Alternate values: 0x004e955a
// 
// Changing this will change the character's name and portrait on the Pause Menu
function FirstPlayerCharacterIndex() => byte(0x003ad178)


// $3ad1ec: (8-bit) Current character ID for Second player
// 
// Will still be set if not in second player mode. 
// 
// Changing this will change the character's name and portrait on the Pause Menu
 function SecondPlayerCharacterIndex() => byte(0x003ad1ec)

// $3ad1f8: (8-bit) Two player mode indicator 
//
// Note: This is set to 1 for Musou AND Versus mode.
// 
// Potential others 0x0621860, 0x0366410, 0x3663bc.  Reversed at 0x003ab5e2
//
// 0x00=Single Player are enabled
// 0x01=Two Players are enabled
function TwoPlayerIndicator() => byte(0x3ad1f8)

// $18c0c (8-bit) Save  Indicator
// 
// An indicator that gets set to 0x1 if and only if the game is either saving or loading the game.
// 
// 0x01:Saving or loading the game. 
// 0x07 and 0x08: Normal operation.  Unknown purpose. 
// 
// When saving 
// 
// Note: The pair 0x00018c0c and 0x0007674c both seem to mirror each other, and both exhibit the same sequence. 
function SaveIndicator() => byte(0x00018c0c)

VALUE_FOR_SAVE_LOAD_OPERATION = 0x01


// $36663c: (8-bit) Value for showing "Load game" on the Load Musou Mode screen. 
// // 
// Can be used for save protection, when loading a game, this stays set to 2.  If you are doing normal play in the post screen this is set to 0.
// 
// 0x00: Not loading a save game. (Use this for save protection)
// 0x01: Set as the load screen is sliding in, not clear why. 
// 0x02: Loading a saved musou mode. 
function LoadGameIndicator() => byte(0x0036663c)

VALUE_DESIRED_FOR_LOAD_GAME_PROTECTION = 0x00

// $3661a4(16-bit) Timer for demo on the main menu.  
//
//This does not appear to be cleared in game, possibly reused, however it is set to 0x0395 every time you're in the demo 
function DemoTimerOnMainMenu() => byte(0x3661a4)

DELAY_FOR_DEMO_MODE = 0x0395

// $36639c: (8-bit) Cycle frames for Press Start 
//
// Cycles between 0x00 and 0x7f and then resets to 0x00.  0x40 is at full visibility, 0x00 and 0x7f is at invisible. 
//
// Note: this will be left in what ever state the demo leaves it until the player enters a stage (Goes through the pre-stage screens and clicks "Start"
function PressStartCycle() => byte(0x0036639c)

// If this is a demo, it'll only be 0x00 for one frame.  There is A VERY small chance (1 in 128) that the demo ends on a 0x00.  
// If so, this will break, but 1/128th of the time the press start screen might display the triggers is an acceptable loss.  
// Other possibilities are a little flimsier, where as this can be verified to be true easier. 
function inDemoCurrently() => PressStartCycle() != 0x00 || prev(PressStartCycle()) !=0x00
function inDemoRP() => PressStartCycle() != 0x00

// $36595c (8-bit) Main Menu detection
// 
// Value 
// 0x1= on Main Menu
// 0x0= Not on main menu (Could be in game, watching demo or in Option screen.) 
// 
// Note: Never 1 when save is loading. 
function MainMenuIndicator() => byte(0x36595c)

VALUE_FOR_MAIN_MENU = 0x01


// $366bcc: (32-bit) Identifier for Secret Ending. 
// 
// This gets set to different values for different screens, however when the secret ending plays, this appears to be set to 0x01b129e0
// 
// This could be a memory location, and the memory there does change, but freezing the first 5 32-bit values there doesn't seem to break anything... yet
// 
// Will be using this to detect the secret ending.  If it's proven false, will revisit.  
function SecretEndingIndentifier() => dword(0x366bcc) 

function isSecretEndingPlaying() => SecretEndingIndentifier() == 0x01b129e0

// $365ce8: (8-bit) "FMV" cutscene indicator. 
//
// 0x00: Normal gameplay/menus.  In engine cutscenes also use 0x00
// 0x01: FMV cutscenes, Before levels, and opening scenes, as well as anything in the movie menu. 
//
// Really only using to avoid add a value check to the Secret cutscene.
//
// NOTE: THis sometimes hits 0x01 when changing menus, likely because a FMV is quickly played there. 
function FMVCutsceneIndicator() => byte(0x365ce8)

FMV_CUTSCENE_INDICATOR_VALUE = 0x01

function isFMVCutscenePlaying() => FMVCutsceneIndicator() == FMV_CUTSCENE_INDICATOR_VALUE

// $620d83: (8-bit) End of Stage result 
// 
// Note: These results are stale if using quick restart (start and select) 
// Mirrors 0x00620e25, 0x00621245, 0x006212e5, 0x00620d83
// 
// Value:
// 0xff=Current stage is ongoing.
// 0x00=Stage Won
// 0x02=Defeat
function endOfStageResult() => byte(0x620d83) == 0x00

// $3e5a08 (32-bit) End of Stage Indicator
// 
// After each stage, this gets set to 0x12b59.  Unsure the exact reason why, may be a pointer, but matches the Challenge mode value.  This also gets reset when quick restarting (start + select) back to the main menu. 
// 
// Changing it does interefere 
VALUE_FOR_END_OF_STAGE_INDICATOR = 0x12b59
function endOfStageIndicator() => dword(0x3e5a08)
function currentFrameEndOfStageHit() => endOfStageIndicator() ==  VALUE_FOR_END_OF_STAGE_INDICATOR
function prevEndOfStagehit() => prev(endOfStageIndicator()) == VALUE_FOR_END_OF_STAGE_INDICATOR

// Find out if we're in a post stage Screen for a win. 
// Note if you do fast restart, the result can be stale, 
// so confirm we're not on the MainMenu, or option screen also. 
function wonStageCheck() =>  currentFrameEndOfStageHit() && endOfStageResult()

// For things like kill counts, that might be triggered just by being in the level  
// Don't use this for a trigger, instead use triggerJustWonStageCheck()
function justWonStageCheck() => wonStageCheck() && !prevEndOfStagehit()

function triggerJustWonStageCheck() => trigger_when(wonStageCheck()) && !prevEndOfStagehit() 

//  $365a80 (8-bit) Control values for parts of the game.  Certain values will trigger different events. 
//
// 04 is set when initial level loads in, but if set will create an infinite loop of videos playing. 
// 24 then will set the game back to playing the main game. 
//
// (4-bit Upper) If this value has the bit 5 or bit 7 set, it appears the level ends.  If bit 5 is set, this becomes 5 (bit 6 gets set) and then bit 7 gets set.  Making it d, indicating loss, and thus game over. 
//
// However if this is set to or just bit 7 gets set to a "win" state. and the level is won. 
//
// Short version: 
// 
// Values: 
// 0xc (0xc0)  Game is in post stage state., win or lose. 
//
// This gets cleared as a new stage is set up and properly cleared when starting a stage from the main menu. 
function postStageIndicator() => byte(0x365a80)

VALUE_FOR_POST_STAGE_RESULTS = 0xc0

// NOTE: This doesn't say "Won" just post game
function inPostStageScreen() => postStageIndicator() == VALUE_FOR_POST_STAGE_RESULTS

function saveProtection() => SaveIndicator() != VALUE_FOR_SAVE_LOAD_OPERATION // && LoadGameIndicator() == VALUE_DESIRED_FOR_LOAD_GAME_PROTECTION   Removed because it blocks musou mode completion.    But also with new currentFrameEndOfStageHit is better than this. 

VALUE_FOR_CHARACTER_LOCKED = 0x00
VALUE_FOR_CHARACTER_UNLOCK = 0x01

function characterNowUnlocked(characterMemoryLocation) => characterMemoryLocation == VALUE_FOR_CHARACTER_UNLOCK
function characterNotUnlockedLastFrame(characterMemoryLocation) => prev(characterMemoryLocation) == VALUE_FOR_CHARACTER_LOCKED

function characterUnlocked(characterMemoryLocation)
{
    // Test if the character is currently unlocked
    // 
    // characterMemoryLocation: 8-bit Memory location for the current character target
    //
    // Return true if unlocked, false if not unlocked. 
    return characterNowUnlocked(characterMemoryLocation) && 
           characterNotUnlockedLastFrame(characterMemoryLocation)
}

// Technically this could be + 1 for memoryLocation
// and compare against 0x82, but this is always set to 0x8200
VALUE_FOR_WEAPON_LOCK = 0x8200

function weaponNowUnlocked(weaponMemoryLocation) => weaponMemoryLocation != VALUE_FOR_WEAPON_LOCK
function weaponNotUnlockedLastFrame(weaponMemoryLocation) => prev(weaponMemoryLocation) == VALUE_FOR_WEAPON_LOCK
function weaponUnlockedLastFrame(weaponMemoryLocation) => !weaponNotUnlockedLastFrame(weaponMemoryLocation)


function weaponUnlocked(weaponMemoryLocation)
{
    // Test if the weapon was just unlocked
    // 
    // weaponMemoryLocation: 8-bit Memory location for the current weapon target
    //
    // Return true if unlocked, false if not unlocked. 
    // Note: Technically this could be + 1 for memoryLocation
    // and compare against 0x82, but this is always set to 0x8200
  
    return weaponNowUnlocked(weaponMemoryLocation) && 
           weaponNotUnlockedLastFrame(weaponMemoryLocation)
}

// simple logic. 
function didntPreviouslyOwnAllWeapons(array) => tally_of(array, 1, a => once(weaponNotUnlockedLastFrame(a())))
function ownAllWeapons(array) => tally_of(array, length(array), a => once(weaponNowUnlocked(a())))

function didntpreviouslyOwnAllItems(array) => tally_of(array, 1, a => once(itemNotUnlockedLastFrame(a["MemoryLocation"])))
function ownAllItems(array) => tally_of(array, length(array), a => once(itemNowUnlocked(a["MemoryLocation"], a["ItemID"])))
function didntpreviouslyMaxItems(array) => tally_of(array, 1, a => once(!itemMaxLevel(a["MemoryLocation"], a["ItemID"], a["MaxLevel"])))
function ownAllMaxItems(array) => tally_of(array, length(array), a => once(itemMaxLevel(a["MemoryLocation"], a["ItemID"], a["MaxLevel"])))

function isTwoPlayerMode() => TwoPlayerIndicator() == 1
function firstPlayerNoExperience() => FirstPlayerExperienceAmount() == 0
function secondPlayerNoExperience() => isTwoPlayerMode() && SecondPlayerExperienceAmount() == 0

// ok this is far more complex then it should be but it fixes some triggers. 
// Check if the stageID is correct.  OR If the stage id is END_OF_STAGE_STAGE_ID, check if we're in the end of stage, and if so use the Level Pause ID
// Otherwise this gets stale when using Start + select 
function checkStageID(id) => (CurrentStageID() == id || (CurrentStageID() == END_OF_STAGE_STAGE_ID && currentFrameEndOfStageHit() && CurrentLevelPauseID() == id))
function checkFactionID(factionID) => CurrentPlayerFactionID() == factionID

function checkIfGeneralKilledByFirstPlayer(characterID)
{
    possibleHits = false 
    for index in range(0,LengthOfKilledOfficerArray) 
        possibleHits = possibleHits || 
                        ( 
                            byte(MemoryLocationOfFirstInStageGeneralKill + (SizeOfKilledGenerals * index)) == characterID
                        )
    return possibleHits
}

function checkNumberGeneralKilledInternal(FirstGeneralMemoryLocation, targetGeneralIndex)
{
    // This should probably be a max of 20 for targetgeneralIndex but this will allow you to put any number in, you do you boo.
    return byte(FirstGeneralMemoryLocation + (SizeOfKilledGenerals * targetGeneralIndex)) != NoGeneral 
}

function checkNumberGeneralKilled(index)  
{
    // Note: this doesn't check less than.  You can do checkNumberGeneralKilled(3) && !checkNumberGeneralKilled(4)
    // Retrofit this to use checkNumberGeneralKilledInternal, that's why it's a bit of a duplication
    return checkNumberGeneralKilledInternal(MemoryLocationOfFirstInStageGeneralKill, index) 
}

// Note this is frames, not seconds. 
function getFramesElapsed() => FramesElapsedInStage()
function getSecondsElapsed() => getFramesElapsed() / 60
function onMainMenu() => MainMenuIndicator() == VALUE_FOR_MAIN_MENU // use saveProtection if you are trying to block saves. 
function MusouModeOnly() => GameplayMode() == MusouMode
function FreeModeOnly() => GameplayMode() == FreeMode 
function ChallengeModeOnly() => GameplayMode() == ChallengeMode 
function MusouModeOrFreeMode() => MusouModeOnly() || FreeModeOnly()

// This makes sure it won't show up when setting up a new musou round or in demo
function requireInGame() => !inDemoCurrently() && never(onMainMenu()) && once(getFramesElapsed() > prev(getFramesElapsed()))

VALUE_FOR_ITEM_LOCK = 0x19

function itemNowUnlocked(itemMemoryLocation, itemID) => itemMemoryLocation == itemID
function itemNotUnlockedLastFrame(itemMemoryLocation) => prev(itemMemoryLocation) == VALUE_FOR_ITEM_LOCK
// we use >= JUST in case the recorded max levels are incorrect.  The goal is to at least hit the level detailed

function itemAtMaxLevel(itemLevelMemoryLocation, maxLevel) => itemLevelMemoryLocation >= maxLevel
// assumption is Max Level might be wrong, but as long as it's below the true max this will still mostly function correctly. 
function itemMaxLevel(itemMemoryLocation, itemID, maxLevel) => itemNowUnlocked(itemMemoryLocation, itemID) && itemAtMaxLevel(itemMemoryLocation + 1, maxLevel)

function itemJustUnlocked(itemMemoryLocation)
{
    // Test if the item is currently unlocked
    // 
    // characterMemoryLocation: 8-bit Memory location for the current item target
    //
    // Return true if unlocked, false if not unlocked. 
    return itemNowUnlocked(itemMemoryLocation) && 
           itemNotUnlockedLastFrame(itemMemoryLocation)
}

VALUE_FOR_NORMAL_MODE = 0x01
VALUE_FOR_HARD_MODE = 0x02

function normalOrHardCheck() => InGameDifficultySelection() >= VALUE_FOR_NORMAL_MODE
function hardModeCheck() => InGameDifficultySelection() == VALUE_FOR_HARD_MODE
function maybeCheckHardMode(hardMode)
{
    // Check if hard mode should be evaluated.  If so, return the comparision
    //
    // hardMode: true if this is a hard mode Achievement.  False otherwise (No comparision)
    if(hardMode == true)
        return hardModeCheck()
    else 
        return true
}

function secondPlayerAllowed() 
{
    // Returns true, just a visible comment
    return true
}

// This is a check for 10 level Musou Modes.
function isFactionLeader(characterIndex) => characterIndex == SunJian || characterIndex == CaoCao || characterIndex == LiuBei

function numberofMusouStages(characterIndex)
{
    // Check what number of musou Stages should be complete 
    // 
    // characterIndex: target ID for the character
    if (isFactionLeader(characterIndex))
    {
        return 10
    }
    else
    {
        return 7
    }
}


function checkFirstPlayerCharacterIndex(characterIndex) => FirstPlayerCharacterIndex() == characterIndex 
function checkSecondPlayerCharacterIndex(characterIndex) => SecondPlayerCharacterIndex() == characterIndex 

function musouComplete(characterIndex)
{
    // musouCompleted check if the Character Index is the character who completed the musou mode. 
    // 
    // characterIndex: ID for the character
    targetMusouStages = numberofMusouStages(characterIndex)
    return CurrentStagesCompleteMusouMode() == targetMusouStages && 
           prev(CurrentStagesCompleteMusouMode()) == targetMusouStages- 1 &&
           checkFirstPlayerCharacterIndex(characterIndex)
}

function createMusouModeAchievement(musouObject, hardMode = false)
{
    // Create an achievement for completing a character's Musou Mode
    // 
    // musouObject: should be a dictionary with the following values. 
    //      name: Displayed name of the achievement
    //      description: Displayed description of the achievements 
    //      points: How many points the achievement is worth
    //      index:  Index of Character to check against
    // hardMode: true if this is for hardmode, false otherwise. 
    // TODO : Need to check if two player mode is acceptable to devCompliance. 
    achievement(musouObject["name"],
                musouObject["description"] + asASinglePlayerString, 
                musouObject["points"],
                trigger = MusouModeOnly() &&
                          musouComplete(musouObject["index"]) && 
                          wonStageCheck() && 
                          !isTwoPlayerMode() &&
                          saveProtection(),
                id = musouObject["achievementID"]
                )
}


function createHardMusouModeAchievement(musouObject)
{
    // Create an achievement for completing a character's Musou Mode
    // 
    // musouObject: should be a dictionary with the following values. 
    //      name: Displayed name of the achievement
    //      description: Displayed description of the achievements 
    //      points: How many points the achievement is worth
    //      index:  Index of Character to check against
    targetMusouStages = numberofMusouStages(musouObject["index"])
    achievement(musouObject["name"],
                musouObject["description"], 
                musouObject["points"],
                trigger = measured(tally_of(range(1,targetMusouStages), 
                                            targetMusouStages,  
                                            index => once( CurrentStagesCompleteMusouMode() == index && 
                                                 prev(CurrentStagesCompleteMusouMode()) == index - 1 &&
                                                 checkFirstPlayerCharacterIndex(musouObject["index"]) && 
                                                 hardModeCheck() &&
                                                 MusouModeOnly() &&
                                                 wonStageCheck() && 
                                                 !isTwoPlayerMode() &&
                                                 saveProtection()
                                                 )
                                           )
                                  ),
                id = musouObject["achievementID"]
                // No reset here, because it's a single session achievement. 
                )
}


function createUnlockCharacterAchievement(unlockObject)
{
    // Create an achievement for unlocking a character.
    // 
    // unlockObject: should be a dictionary with the following values. 
    //      name: Displayed name of the achievement
    //      description: Displayed description of the achievements 
    //      points: How many points the achievement is worth
    //      memoryLocation: 8-bit Memory location for the current character target
    achievement(unlockObject["name"],
                unlockObject["description"], 
                1,
                trigger = MusouModeOrFreeMode() &&
                          characterUnlocked(unlockObject["memoryLocation"]) && 
                          wonStageCheck() && 
                          secondPlayerAllowed() &&
                          saveProtection(),
                id = unlockObject["achievementID"]
                )
}

function createUnlockFourthWeaponAchievement(name, description, weaponIndex, achievementID = 0)
{
    // Create an achievement for unlocking a Fourth weapon.
    // 
    // name: Displayed name of the achievement
    // description: Displayed description of the achievements 
    // points: How many points the achievement is worth
    // weaponMemoryLocation: 16-bit Memory location for the current weapon target

    targetTrigger = (MusouModeOrFreeMode()) &&
                triggerJustWonStageCheck() && 
                !isTwoPlayerMode() &&
                saveProtection() &&
                requireInGame() // This shows up when setting up a new musou round. 

                

    possibleHits = false 
    for index in range(0,5) // Anything more than this. and it's going to hit the location of the number of collected memory space. 
        possibleHits = possibleHits || 
                        ( 
                            NumbeOfWeaponsCollectedInStage() >= (index + 1) &&
                            byte(MemoryLocationOfFirstInStageWeaponCollected + SizeOfInGameWeaponDrop * index) == weaponIndex
                        )
    achievement(name,
                description + asASinglePlayerString, 
                5,
                trigger = targetTrigger && possibleHits,
                id = achievementID 
                )
}


function createUnlockRareItemAchievement(name, description, itemIndex, achievementID = 0)
{
    // Create an achievement for a rare item.
    // 
    // name: Displayed name of the achievement
    // description: Displayed description of the achievements 
    // points: How many points the achievement is worth
    // itemMemoryLocation: 8-bit Memory location for the current item target
    targetTrigger = MusouModeOrFreeMode() &&
                    triggerJustWonStageCheck() && 
                    !isTwoPlayerMode() &&
                    saveProtection() &&
                    requireInGame()

    possibleHits = false 
    for index in range(0,5) // Anything more than this. and it's going to hit the weapon's memory space
        possibleHits = possibleHits || 
                        ( 
                            NumbeOfItemsCollectedInStage() >= index + 1 &&
                            byte(MemoryLocationOfFirstInStageItemCollected + SizeOfInGameItemDrop * index) == itemIndex
                        )
    
    achievement(name,
                description + asASinglePlayerString, 
                3,
                trigger = targetTrigger && possibleHits,
                id = achievementID
                )
}

musouMode = []
hardMusouMode = []
characterUnlock = []

function characterDefinition( 
                    characterIndex,
                    unlockMemoryLocation,
                    musouModeAvailable = true,
                    musouModeName = "",
                    musouModeDescription = "",
                    musouModePoints = 5,
                    musouModeAchievementID = 0,
                    hardMusouModeName = "",
                    hardMusouModeDescription = "",
                    hardMusouModePoints = 10,
                    hardMusouModeAchievementID = 0,
                    unlockEnabled = true,
                    unlockName = "",
                    unlockDescription = "",
                    unlockPoint = 1,
                    unlockAchievementID = 0
                    )
{
    name = CharacterLookup[characterIndex]
    if (musouModeAvailable == true)
    {   
        musouModeObject = 
        {
            "name": musouModeName, 
            "description": musouModeDescription,
            "points": musouModePoints,
            "index": characterIndex,
            "achievementID": musouModeAchievementID
        }
        
        if(musouModeObject["name"] == "")
        {
            musouModeObject["name"] = format("Missing Name {0} Beat Musou Mode", name)
        }
        if(musouModeObject["description"] == "")
        {
            musouModeObject["description"] = format("Beat {0}'s Musou Mode on any difficulty", name)
        }
        array_push(musouMode, musouModeObject)

        hardMusouModeObject = 
        {
            "name": hardMusouModeName, 
            "description": hardMusouModeDescription,
            "points": hardMusouModePoints,
            "index": characterIndex,
            "achievementID": hardMusouModeAchievementID

        }
        
        if(hardMusouModeObject["name"] == "")
        {
            hardMusouModeObject["name"] = format("Missing Name {0} Beat Hard Musou Mode", name)
        }
        if(hardMusouModeObject["description"] == "")
        {
            hardMusouModeObject["description"] = format("Beat every stage of {0}'s Musou Mode on Hard in one session {1}", name, asASinglePlayerString)
        }
        array_push(hardMusouMode, hardMusouModeObject)
    }

    if (unlockEnabled == true)
    {   
        unlockObject = 
        {
            "name": unlockName, 
            "description": unlockDescription,
            "points": unlockPoint,
            "memoryLocation": unlockMemoryLocation,
            "achievementID": unlockAchievementID
        }
        
        if(unlockObject["name"] == "")
        {
            unlockObject["name"] = format("{0}", name)
        }
        if(unlockObject["description"] == "")
        {
            unlockObject["description"]= format("Unlock {0}", name)
        }
        array_push(characterUnlock, unlockObject)
    }

    return true
}

characterDefinition( characterIndex = ZhaoYun, 
                     unlockMemoryLocation = ZhaoYunUnlocked(), 
                     unlockEnabled = false, 
                     musouModeName = "The Tiger General", 
                     musouModeAchievementID = 370292,
                     hardMusouModeName = "The Dragon of Changshan",
                     hardMusouModeAchievementID = 370324)
characterDefinition( characterIndex = GuanYu, 
                     unlockMemoryLocation = GuanYuUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370294, 
                     musouModeName = "Lord of the Magnificent Beard",
                     hardMusouModeAchievementID = 370325, 
                     hardMusouModeName = "God of War")
characterDefinition( characterIndex = ZhangFei, 
                     unlockMemoryLocation = ZhangFeiUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370295, 
                     musouModeName = "Snake Spear General",
                     hardMusouModeAchievementID = 370326, 
                     hardMusouModeName = "Zhang Yide")
characterDefinition( characterIndex = XiahouDun, 
                     unlockMemoryLocation = XiahouDunUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370296, 
                     musouModeName = "One-Eyed Xiahou",
                     hardMusouModeAchievementID = 370327, 
                     hardMusouModeName = "Brother Dun")
characterDefinition( characterIndex = DianWei, 
                     unlockMemoryLocation = DianWeiUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370297, 
                     musouModeName = "Dian Wei",
                     hardMusouModeAchievementID = 370328, 
                     hardMusouModeName = "The Man with No Nicknames")
characterDefinition( characterIndex = XuZhu, 
                     unlockMemoryLocation = XuZhuUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370298, 
                     musouModeName = "Tiger Fool",
                     hardMusouModeAchievementID = 370329, 
                     hardMusouModeName = "Crazy Tiger") // DW2 Unlock
characterDefinition( characterIndex = ZhouYu, 
                     unlockMemoryLocation = ZhouYunUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370293, 
                     musouModeName = "Soy Sauce",
                     hardMusouModeAchievementID = 370330, 
                     hardMusouModeName = "Mei Zhou Lang")
characterDefinition( characterIndex = LuXun, 
                     unlockMemoryLocation = LuXunUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370299, 
                     musouModeName = "The Young Courage Flame",
                     hardMusouModeAchievementID = 370331, 
                     hardMusouModeName = "Marquis Zhao") // DW2 Unlock
characterDefinition( characterIndex = TaishiCi, 
                     unlockMemoryLocation = TaishiCiUnlocked(), 
                     musouModeAchievementID = 370300, 
                     musouModeName = "Taishi Ci",
                     hardMusouModeAchievementID = 370332, 
                     hardMusouModeName = "Ziyi",
                     unlockAchievementID = 370425, 
                     unlockName="")
characterDefinition( characterIndex = DiaoChan, 
                     unlockMemoryLocation = DiaoChanUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370426, 
                     unlockName="Lady Diao Chan")
characterDefinition( characterIndex = ZhugeLiang, 
                     unlockMemoryLocation = ZhugeLiangUnlocked(), 
                     musouModeAchievementID = 370301, 
                     musouModeName = "The Crouching Dragon",
                     hardMusouModeAchievementID = 370333, 
                     hardMusouModeName = "The Sleeping Dragon",
                     unlockAchievementID = 370427, 
                     unlockName="")
characterDefinition( characterIndex = CaoCao, 
                     unlockMemoryLocation = CaoCaoUnlocked(), 
                     musouModeAchievementID = 370302, 
                     musouModeName = "The Hero of Chaos",
                     hardMusouModeAchievementID = 370334, 
                     hardMusouModeName = "Emperor Wu of Wei",
                     unlockAchievementID = 370428, 
                     unlockName="")
characterDefinition( characterIndex = LuBu, 
                     unlockMemoryLocation = LuBuUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370429, 
                     unlockName="The Flying General")
characterDefinition( characterIndex = SunShangXiang,  
                     unlockMemoryLocation = SunShangXiangUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370303, 
                     musouModeName = "Archer Princess",
                     hardMusouModeAchievementID = 370335, 
                     hardMusouModeName = "Lady Sun")
characterDefinition( characterIndex = LiuBei, 
                     unlockMemoryLocation = LiuBeiUnlocked(), 
                     musouModeAchievementID = 370304, 
                     musouModeName = "Liu Xuande",
                     hardMusouModeAchievementID = 370336, 
                     hardMusouModeName = "Emperor Zhaolie",
                     unlockAchievementID = 370430, 
                     unlockName="")
characterDefinition( characterIndex = SunJian, 
                     unlockMemoryLocation = SunJianUnlocked(), 
                     musouModeAchievementID = 370305, 
                     musouModeName = "The Tiger of Jiangdong",
                     hardMusouModeAchievementID = 370337, 
                     hardMusouModeName = "Emperor Wulie",
                     unlockAchievementID = 370431, 
                     unlockName="")
characterDefinition( characterIndex = SunQuan, 
                     unlockMemoryLocation = SunQuanUnlocked(), 
                     musouModeAchievementID = 370306, 
                     musouModeName = "Sun Zhongmou",
                     hardMusouModeAchievementID = 370338, 
                     hardMusouModeName = "Great Emperor of Wu",
                     unlockAchievementID = 370432, 
                     unlockName="")
characterDefinition( characterIndex = DongZhuo, 
                     unlockMemoryLocation = DongZhuoUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370433, 
                     unlockName="Calamity Emperor")
characterDefinition( characterIndex = YuanShao, 
                     unlockMemoryLocation = YuanShaoUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370434, 
                     unlockName="Yuan Benchu")
characterDefinition( characterIndex = MaChao, 
                     unlockMemoryLocation = MaChaoUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370307, 
                     musouModeName = "Ma Chao the Splendid",
                     hardMusouModeAchievementID = 370339, 
                     hardMusouModeName = "Marquis Wei") // DW2 Unlock
characterDefinition( characterIndex = HuangZhong, 
                     unlockMemoryLocation = HuangZhongUnlocked(), 
                     musouModeAchievementID = 370342, 
                     musouModeName = "Marquis Gang of Shu",
                     hardMusouModeAchievementID = 370340, 
                     hardMusouModeName = "King of Hanzhong",
                     unlockAchievementID = 370435, 
                     unlockName="")
characterDefinition( characterIndex = XiahouYuan, 
                     unlockMemoryLocation = XiahouYuanUnlocked(), 
                     musouModeAchievementID = 370309, 
                     musouModeName = "Marquis Min",
                     hardMusouModeAchievementID = 370341, 
                     hardMusouModeName = "Yuangel",
                     unlockAchievementID = 370436,
                     unlockName="")
characterDefinition( characterIndex = ZhangLiao, 
                     unlockMemoryLocation = ZhangLiaoUnlocked(), 
                     musouModeAchievementID = 370310, 
                     musouModeName = "Zhang Wenyuan",
                     hardMusouModeAchievementID = 370308, 
                     hardMusouModeName = "Marquis Gang of Wei",
                     unlockAchievementID = 370437, 
                     unlockName="")
characterDefinition( characterIndex = SimaYi, 
                     unlockMemoryLocation = SimaYiUnlocked(), 
                     musouModeAchievementID = 370311, 
                     musouModeName = "Emperor Xuan of Jin",
                     hardMusouModeAchievementID = 370343,
                     hardMusouModeName = "King Sima Xuan",
                     unlockAchievementID = 370438, 
                     unlockName="")
characterDefinition( characterIndex = LuMeng, 
                     unlockMemoryLocation = LuMengUnlocked(), 
                     musouModeAchievementID = 370312, 
                     musouModeName = "Lu Ziming",
                     hardMusouModeAchievementID = 370344, 
                     hardMusouModeName = "The Gentleman of Learning",
                     unlockAchievementID = 370439, 
                     unlockName="")
characterDefinition( characterIndex = GanNing, 
                     unlockMemoryLocation = GanNingUnlocked(), 
                     musouModeAchievementID = 370313, 
                     musouModeName = "The Jolly Pirate",
                     hardMusouModeAchievementID = 370345, 
                     hardMusouModeName = "Gan Xingba",
                     unlockAchievementID = 370440, 
                     unlockName="")
characterDefinition( characterIndex = JiangWei, 
                     unlockMemoryLocation = JiangWeiUnlocked(), 
                     musouModeAchievementID = 370314, 
                     musouModeName = "Gallant Unicorn",
                     hardMusouModeAchievementID = 370346, 
                     hardMusouModeName = "The Dragon's Prodigy",
                     unlockAchievementID = 370441, 
                     unlockName="")
characterDefinition( characterIndex = ZhangJiao, 
                     unlockMemoryLocation = ZhangJiaoUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370442, 
                     unlockName="The General of Heaven")
characterDefinition( characterIndex = XuHuang, 
                     unlockMemoryLocation = XuHuangUnlocked(), 
                     musouModeAchievementID = 370315, 
                     musouModeName = "Xu Gongming",
                     hardMusouModeAchievementID = 370291, 
                     hardMusouModeName = "Marquis Zhuang",
                     unlockAchievementID = 370443, 
                     unlockName="")
characterDefinition( characterIndex = ZhangHe, 
                     unlockMemoryLocation = ZhangHeUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370316, 
                     musouModeName = "Zhang Junyi", 
                     hardMusouModeAchievementID = 370347, 
                     hardMusouModeName = "The Other Marquis Zhuang")
characterDefinition( characterIndex = ZhenJi, 
                     unlockMemoryLocation = ZhenJiUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370317, 
                     musouModeName = "Lady Zhen", 
                     hardMusouModeAchievementID = 370348, 
                     hardMusouModeName = "Empress Wenzhao") // DW2 unlock
characterDefinition( characterIndex = HuangGai, 
                     unlockMemoryLocation = HuangGaiUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370318, 
                     musouModeName = "Gentle Heart Cyclops",
                     hardMusouModeAchievementID = 370349, 
                     hardMusouModeName = "The Master of Martial Arts")
characterDefinition( characterIndex = SunCe, 
                     unlockMemoryLocation = SunCeUnlocked(), 
                     musouModeAchievementID = 370319, 
                     musouModeName = "The Little Conqueror of Jiangdong",
                     hardMusouModeAchievementID = 370350, 
                     hardMusouModeName = "Prince Huan of Changsha", 
                     unlockAchievementID = 370444, 
                     unlockName="")
characterDefinition( characterIndex = WeiYan, 
                     unlockMemoryLocation = WeiYanUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370320, 
                     musouModeName = "Wei Yan",
                     hardMusouModeAchievementID = 370351, 
                     hardMusouModeName = "Wei Wenchang") // DW2 Unlock
characterDefinition( characterIndex = PangTong, 
                     unlockMemoryLocation = PangTongUnlocked(), 
                     musouModeAchievementID = 370321, 
                     musouModeName = "The Fledgling Phoenix",
                     hardMusouModeAchievementID = 370352, 
                     hardMusouModeName = "Marquis Jing",
                     unlockAchievementID = 370445, 
                     unlockName="") 
characterDefinition( characterIndex = MengHuo, 
                     unlockMemoryLocation = MengHuoUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370446, 
                     unlockName ="King Meng Huo")
characterDefinition( characterIndex = ZhuRong, 
                     unlockMemoryLocation = ZhuRongUnlocked(), 
                     musouModeAvailable = false,
                     unlockAchievementID = 370447, 
                     unlockName="The Goddess of Fire")
characterDefinition( characterIndex = DaQiao, 
                     unlockMemoryLocation = DaQiaoUnlocked(), 
                     unlockEnabled = false,
                     musouModeAchievementID = 370322, 
                     musouModeName = "Da Qiao",
                     hardMusouModeAchievementID = 370353, 
                     hardMusouModeName = "Elder Qiao") // DW2 Unlock
characterDefinition( characterIndex = XiaoQiao, 
                     unlockMemoryLocation = XiaoQiaoUnlocked(), 
                     musouModeAchievementID = 370323, 
                     musouModeName = "Xiao Qiao",
                     hardMusouModeAchievementID = 370354, 
                     hardMusouModeName = "Younger Qiao", 
                     unlockAchievementID = 370448, 
                     unlockName="")
characterDefinition( characterIndex = FuXi, 
                     unlockMemoryLocation = FuXiUnlocked(), 
                     unlockPoint = 5, musouModeAvailable = false,
                     unlockAchievementID = 370449, 
                     unlockName="Lord Fu Xi")
characterDefinition( characterIndex = NuWa, 
                     unlockMemoryLocation = NuWaUnlocked(), 
                     unlockPoint = 5, musouModeAvailable = false,
                     unlockAchievementID = 370450, 
                     unlockName="The Goddess Nu Wa")


for musouObject in musouMode
    createMusouModeAchievement(musouObject = musouObject)

for hardMusouObject in hardMusouMode
    createHardMusouModeAchievement(musouObject = hardMusouObject)

for unlockObject in characterUnlock
    createUnlockCharacterAchievement(unlockObject)
    

// FUTURETODO: Find a way to check save?  May not be important. 
achievement("The Gang's All Here",
            "Unlock Lu Xun, Da Qiao, Xu Zhu, Zhen Ji, Ma Chao, and Wei Yan, either through completing Musou Mode once with each faction or having a DW2 save file", 
                0,
                trigger = characterNowUnlocked(LuXunUnlocked()) && 
                          characterNowUnlocked(DaQiaoUnlocked()) && 
                          characterNowUnlocked(XuZhuUnlocked()) && 
                          characterNowUnlocked(ZhenJiUnlocked()) && 
                          characterNowUnlocked(MaChaoUnlocked()) && 
                          characterNowUnlocked(WeiYanUnlocked()) &&
                          true, // saveProtection(), // We remove the save protection on this achievement intentionally as it will be done by loading a DW2 file
                id = 370355
                )


createUnlockFourthWeaponAchievement("Fierce Dragon",
                                    "Unlock Fierce Dragon", 
                                    FierceDragon,
                                    370451)
createUnlockFourthWeaponAchievement("Blue Moon Dragon",
                                    "Unlock Blue Moon Dragon", 
                                    BlueMoonDragon,
                                    370452)
createUnlockFourthWeaponAchievement("Viper Blade",
                                    "Unlock Viper Blade", 
                                    ViperBlade,
                                    370453)
createUnlockFourthWeaponAchievement("Kirin Fang",
                                    "Unlock Kirin Fang", 
                                    KirinFang,
                                    370454)
createUnlockFourthWeaponAchievement("Mad Bull",
                                    "Unlock Mad Bull", 
                                    MadBull,
                                    370455)
createUnlockFourthWeaponAchievement("Stone Crusher",
                                    "Unlock Stone Crusher", 
                                    StoneCrusher,
                                    370456)
createUnlockFourthWeaponAchievement("Ancients Sword",
                                    "Unlock Ancients Sword", 
                                    AncientsSword,
                                    370457)
createUnlockFourthWeaponAchievement("Falcon",
                                    "Unlock Falcon", 
                                    Falcon,
                                    370458)
createUnlockFourthWeaponAchievement("Tiger Slayer",
                                    "Unlock Tiger Slayer", 
                                    TigerSlayer,
                                    370459)
createUnlockFourthWeaponAchievement("Gold Globe",
                                    "Unlock Gold Globe", 
                                    GoldGlobe,
                                    370460)
createUnlockFourthWeaponAchievement("Peacock Feather",
                                    "Unlock Peacock Feather", 
                                    PeacockFeather,
                                    370461)
createUnlockFourthWeaponAchievement("Wrath of Heaven",
                                    "Unlock Wrath of Heaven", 
                                    WrathOfHeaven,
                                    370462)
createUnlockFourthWeaponAchievement("Sky Scorcher",
                                    "Unlock Sky Scorcher", 
                                    SkyScorcher,
                                    370463)
createUnlockFourthWeaponAchievement("Sol Chakram",
                                    "Unlock Sol Chakram", 
                                    SolChakram,
                                    370464)
createUnlockFourthWeaponAchievement("Gold Moon Dragon",
                                    "Unlock Gold Moon Dragon", 
                                    GoldMoonDragon,
                                    370465)
createUnlockFourthWeaponAchievement("Savage Wolf",
                                    "Unlock Savage Wolf", 
                                    SavageWolf,
                                    370466)
createUnlockFourthWeaponAchievement("Master Wolf",
                                    "Unlock Master Wolf", 
                                    MasterWolf,
                                    370467)
createUnlockFourthWeaponAchievement("Grand Star",
                                    "Unlock Grand Star", 
                                    GrandStar,
                                    370468)
createUnlockFourthWeaponAchievement("Grand Master",
                                    "Unlock Grand Master", 
                                    GrandMaster,
                                    370469)
createUnlockFourthWeaponAchievement("Steel Dragon",
                                    "Unlock Steel Dragon", 
                                    SteelDragon,
                                    370470)
createUnlockFourthWeaponAchievement("Oracle Sword",
                                    "Unlock Oracle Sword", 
                                    OracleSword,
                                    370471)
createUnlockFourthWeaponAchievement("Demon Fang",
                                    "Unlock Demon Fang", 
                                    DemonFang,
                                    370472)
createUnlockFourthWeaponAchievement("Dragon Breath",
                                    "Unlock Dragon Breath", 
                                    DragonBreath,
                                    370473)
createUnlockFourthWeaponAchievement("Dark Feather",
                                    "Unlock Dark Feather", 
                                    DarkFeather,
                                    370474)
createUnlockFourthWeaponAchievement("White Tiger",
                                    "Unlock White Tiger", 
                                    WhiteTiger,
                                    370475)
createUnlockFourthWeaponAchievement("Sea Master",
                                    "Unlock Sea Master", 
                                    SeaMaster,
                                    370476)
createUnlockFourthWeaponAchievement("Blink",
                                    "Unlock Blink", 
                                    Blink,
                                    370477)
createUnlockFourthWeaponAchievement("Volcano Staff",
                                    "Unlock Volcano Staff", 
                                    VolcanoStaff,
                                    370478)
createUnlockFourthWeaponAchievement("Marauder",
                                    "Unlock Marauder", 
                                    Marauder,
                                    370479)
createUnlockFourthWeaponAchievement("Peacock Talon",
                                    "Unlock Peacock Talon", 
                                    PeacockTalon,
                                    370480)
createUnlockFourthWeaponAchievement("Dark Moon Flute",
                                    "Unlock Dark Moon Flute", 
                                    DarkMoonFlute,
                                    370481)
createUnlockFourthWeaponAchievement("Black Shadow",
                                    "Unlock Black Shadow", 
                                    BlackShadow,
                                    370482)
createUnlockFourthWeaponAchievement("Overlord",
                                    "Unlock Overlord", 
                                    Overlord,
                                    370483)
createUnlockFourthWeaponAchievement("Double Comet",
                                    "Unlock Double Comet", 
                                    DoubleComet,
                                    370484)
createUnlockFourthWeaponAchievement("Tornado Staff",
                                    "Unlock Tornado Staff", 
                                    TornadoStaff,
                                    370485)
createUnlockFourthWeaponAchievement("King of Beasts",
                                    "Unlock King of Beasts", 
                                    KingOfBeasts,
                                    370486)
createUnlockFourthWeaponAchievement("Magma Wheel",
                                    "Unlock Magma Wheel", 
                                    MagmaWheel,
                                    370487)
createUnlockFourthWeaponAchievement("True Beauty",
                                    "Unlock True Beauty", 
                                    TrueBeauty,
                                    370488)
createUnlockFourthWeaponAchievement("True Grace",
                                    "Unlock True Grace", 
                                    TrueGrace,
                                    370489)
createUnlockFourthWeaponAchievement("Fu Xi's Sword", 
                                    "Unlock Fu Xi's Sword", 
                                    FuXisSword,
                                    370490)
createUnlockFourthWeaponAchievement("Nu Wa's Rapier", 
                                    "Unlock Nu Wa's Rapier", 
                                    NuWasRapier,
                                    370491)

createUnlockRareItemAchievement("Red Hare", 
                                 "Unlock Red Hare", 
                                 RedHare,
                                 370492)
createUnlockRareItemAchievement("Hex Mark Saddle", 
                                 "Unlock Hex Mark Saddle", 
                                 HexMarkSaddle,
                                 370493)
createUnlockRareItemAchievement("Imperial Saddle", 
                                 "Unlock Imperial Saddle", 
                                 ImperialSaddle,
                                 370494)
createUnlockRareItemAchievement("The Art of War", 
                                 "Unlock The Art of War", 
                                 ArtOfWar,
                                 370495)
createUnlockRareItemAchievement("Bodyguard Manual", 
                                 "Unlock Bodyguard Manual", 
                                 BodyguardManual,
                                 370496)
createUnlockRareItemAchievement("The Way of Musou", 
                                 "Unlock The Way of Musou", 
                                 WayOfMusou,
                                 370497)
createUnlockRareItemAchievement("Survival Guide", 
                                 "Unlock Survival Guide", 
                                 SurvivalGuide,
                                 370498)
createUnlockRareItemAchievement("Defender", 
                                 "Unlock Defender", 
                                 Defender,
                                 370499)
createUnlockRareItemAchievement("Fire Arrows", 
                                 "Unlock Fire Arrows", 
                                 FireArrows,
                                 370500)
createUnlockRareItemAchievement("Buckler", 
                                 "Unlock Buckler", 
                                 Buckler,
                                 370501)
createUnlockRareItemAchievement("Power Scroll", 
                                 "Unlock Power Scroll", 
                                 PowerScroll,
                                 370502)
createUnlockRareItemAchievement("Golden Harness", 
                                 "Unlock Golden Harness", 
                                 GoldenHarness,
                                 370503)

function createWeaponTierListAchievement(name, description, points, arrayOfWeapons, achievementID)
{
    // Creates an achievement for a array of weapons used for tier 2 and tier 3.
    // 
    // name: Displayed name of the achievement
    // description: Displayed description of the achievements 
    // points: How many points the achievement is worth
    // arrayOfWeapons: An array of function pointers to the weapons of the tier. 
    weaponCount = length(arrayOfWeapons)
    achievement(name,
                description, 
                points,
                trigger = MusouModeOrFreeMode() &&
                          didntPreviouslyOwnAllWeapons(arrayOfWeapons) &&   // As long as we don't 
                          measured(ownAllWeapons(arrayOfWeapons)) &&
                          never(!wonStageCheck()) && 
                          secondPlayerAllowed() &&
                          saveProtection(),
                id = achievementID
               )
}

// Second tier achievement
// Note this is EVERY character including Nu Xi and Fu Xi.  It doesn't requiring playing as every character but does require playing many of the characters
createWeaponTierListAchievement("Get All 2nd Weapons",
        "Collect every 2nd weapon", 
        5,
        TierTwoWeapons,
        370356)
// Tier Three achievement, this requires even more waepons then Tier 2, and it's probably going to needed a harder difficulty, which means more leveling of every character.
// Though this does allow Second player abuse.  
createWeaponTierListAchievement("Get All 3rd Weapons",
        "Collect every 3rd weapon", 
        5,
        TierThreeWeapons,
        370357)

NormalItems = 
[
    {"Name": "SpeedScrollOwned", "MemoryLocation": SpeedScrollOwned(), "MaxLevel": 16, "ItemID": SpeedScroll },
    {"Name": "WingBootsOwned", "MemoryLocation": WingBootsOwned(), "MaxLevel": 16, "ItemID": WingBoots },
    {"Name": "DragonAmuletOwned", "MemoryLocation": DragonAmuletOwned(), "MaxLevel": 60, "ItemID": DragonAmulet },
    {"Name": "PeacockUrnOwned", "MemoryLocation": PeacockUrnOwned(), "MaxLevel": 60, "ItemID": PeacockUrn },
    {"Name": "TigerAmuletOwned", "MemoryLocation": TigerAmuletOwned(), "MaxLevel": 20, "ItemID": TigerAmulet },
    {"Name": "TortoiseAmuletOwned", "MemoryLocation": TortoiseAmuletOwned(), "MaxLevel": 40, "ItemID": TortoiseAmulet },
    {"Name": "HuangBowOwned", "MemoryLocation": HuangBowOwned(), "MaxLevel": 40, "ItemID": HuangBow },
    {"Name": "ShellArmorOwned", "MemoryLocation": ShellArmorOwned(), "MaxLevel": 40, "ItemID": ShellArmor },
    {"Name": "HornedHelmetOwned", "MemoryLocation": HornedHelmetOwned(), "MaxLevel": 40, "ItemID": HornedHelmet },
    {"Name": "CavalryArmorOwned", "MemoryLocation": CavalryArmorOwned(), "MaxLevel": 40, "ItemID": CavalryArmor },
    {"Name": "SevenStarOrbOwned", "MemoryLocation": SevenStarOrbOwned(), "MaxLevel": 20, "ItemID": SevenStarOrb },
    {"Name": "WindScrollOwned", "MemoryLocation": WindScrollOwned(), "MaxLevel": 20, "ItemID": WindScroll },
    {"Name": "ElixirOwned", "MemoryLocation": ElixirOwned(), "MaxLevel": 20, "ItemID": Elixir },
]


// 1 Collect minor items (Accesories (Should use Add Hits)) 
achievement("Collect All Common Items",
            "Collect all thirteen common (blue) items", 
            3,
            trigger = MusouModeOrFreeMode() &&
                      didntpreviouslyOwnAllItems(NormalItems) &&   // As long as we don't already have them all 
                      measured(ownAllItems(NormalItems)) &&
                      never(!wonStageCheck()) &&
                      secondPlayerAllowed() &&
                      saveProtection(),
            id = 370358
)

// This has been replaced, but left the code idea here for subsets. 
// achievement("[VOID] They Can’t Handle Any More Power",
//             "The level of grind on this is insane; collect the strongest version of all common items", 
//             25,
//             trigger = MusouModeOrFreeMode() &&
//                       didntpreviouslyMaxItems(NormalItems) &&   // As long as we don't already have them all 
//                       measured(ownAllMaxItems(NormalItems)) &&
//                       never(!wonStageCheck()) &&
//                       secondPlayerAllowed() &&
//                       saveProtection(),
//             id = 370359
// )

// There's an easter egg for Guan Yu being on the Wu side and an intro for the level.  
// However in code it's mostly the same for Wei.  The one difference is the starting position, so we check the starting position. 
// BUT WAIT there's more trouble, because if you're riding a horse (Red hare, let's be honest) You won't be at the starting position I expect 
// So we're going to give it an 0x100 buffer, more than enough for this to work, but that's what will help us trigger the easter egg. 
function TestForGuanYuEasterEgg()
{
    XLocationForFanCastleWuStart = 0x46afc8
    YLocationForFanCastleWuStart = 0xc49600
    ZLocationForFanCastleWuStart = 0x46b798
    MaximumOffset = 0x100
    
    return CutsceneIndicator() == VALUE_FOR_CUTSCENE_PLAYING && 
           CutsceneIndex() == VALUE_FOR_INTRO_SCENE &&  // it's the intro we're looking for. 
           firstPlayerXPosition() < XLocationForFanCastleWuStart + MaximumOffset &&  
           firstPlayerXPosition() > XLocationForFanCastleWuStart - MaximumOffset &&  
           firstPlayerYPosition() < YLocationForFanCastleWuStart + MaximumOffset &&  
           firstPlayerYPosition() > YLocationForFanCastleWuStart - MaximumOffset &&  
           firstPlayerZPosition() < ZLocationForFanCastleWuStart + MaximumOffset &&  
           firstPlayerZPosition() > ZLocationForFanCastleWuStart - MaximumOffset
}
FramesForGuanYuEasterEgg = 700


achievement("Guan Yu's Most Difficult Enemy?",
             "Watch the easter egg intro for The Battle at Fan Castle", 
             2,
             trigger = FreeModeOnly() &&
                       checkFirstPlayerCharacterIndex(GuanYu) &&
                       checkStageID(BattleAtFanCastleStageID) &&
                       checkFactionID(AlliedForcesFactionID) &&
                       repeated(FramesForGuanYuEasterEgg, TestForGuanYuEasterEgg()) &&
                       never(onMainMenu()),
             id = 370359
)

stageArray = 
[
    {
        "ID": YellowTurbanRebellionStageID, 
        "FirstSideID": HanForcesFactionID, 
        "FirstSideAchievementID": 370371,
        "FirstSideKillLeaderboardID": 82278,
        "FirstSideFastestLeaderboardID":82279,
        "SecondSideID": YellowTurbansFactionID, 
        "SecondSideAchievementID": 370372,
        "SecondSideKillLeaderboardID": 82280,
        "SecondSideFastestLeaderboardID":82281,
        "NormalSecondAchievementID": 370373 // creates an achievement for the second faction.
    },
    {
        "ID": BattleAtHuLaoGateStageID, 
        "FirstSideID": AlliedForcesFactionID, 
        "FirstSideAchievementID": 370374,
        "FirstSideKillLeaderboardID": 82282,
        "FirstSideFastestLeaderboardID":82283,
        "SecondSideAchievementID": 370375,
        "SecondSideKillLeaderboardID": 82284,
        "SecondSideFastestLeaderboardID":82285,
        "SecondSideID": DongZhuoForcesFactionID, 
        "NormalSecondAchievementID": 370376 // creates an achievement for the second faction.
    },
    {
        "ID": SurpriseAttackOnLiuBiaoStageID, 
        "FirstSideID": SunJianForcesFactionID, 
        "FirstSideAchievementID": 370377,
        "FirstSideKillLeaderboardID": 82286,
        "FirstSideFastestLeaderboardID":82287,
        "SecondSideAchievementID": 370378,
        "SecondSideKillLeaderboardID": 82288,
        "SecondSideFastestLeaderboardID":82289,
        "SecondSideID": LiuBiaoForcesFactionID, 
        "NormalSecondAchievementID": 370379 // creates an achievement for the second faction.
    },
    {
        "ID": BattleAtWanCastleStageID, 
        "FirstSideID": CaoCaoForcesFactionID, 
        "FirstSideAchievementID": 370380,
        "FirstSideKillLeaderboardID": 82290,
        "FirstSideFastestLeaderboardID":82291,
        "SecondSideAchievementID": 370381,
        "SecondSideKillLeaderboardID": 82292,
        "SecondSideFastestLeaderboardID":82293,
        "SecondSideID": ZhangXiuForcesFactionID, 
        "NormalSecondAchievementID": 370382 // creates an achievement for the second faction.
    },
    {
        "ID": AssaultOnTheWuTerritoryStageID, 
        "FirstSideID": SunCeForcesFactionID, 
        "FirstSideAchievementID": 370383,
        "FirstSideKillLeaderboardID": 82294,
        "FirstSideFastestLeaderboardID":82295,
        "SecondSideAchievementID": 370384,
        "SecondSideKillLeaderboardID": 82296,
        "SecondSideFastestLeaderboardID":82297,
        "SecondSideID": AlliedForcesFactionID, 
        "NormalSecondAchievementID": 370385 // creates an achievement for the second faction.
    },
    {
        "ID": BattleAtGuanDuStageID, 
        "FirstSideID": CaoCaoForcesFactionID, 
        "FirstSideAchievementID": 370386,
        "FirstSideKillLeaderboardID": 82298,
        "FirstSideFastestLeaderboardID":82299,
        "SecondSideAchievementID": 370387,
        "SecondSideKillLeaderboardID": 82300,
        "SecondSideFastestLeaderboardID":82301,
        "SecondSideID": YuanShaoForcesFactionID,
        "NormalSecondAchievementID": 370388 // creates an achievement for the second faction. 
    },
    {
        "ID": GuanYusEscapeStageID, 
        "FirstSideID": GuanYuForcesFactionID, 
        "FirstSideAchievementID": 370389,
        "FirstSideKillLeaderboardID": 82302,
        "FirstSideFastestLeaderboardID":82303,
        "SecondSideAchievementID": 370390,
        "SecondSideKillLeaderboardID": 82304,
        "SecondSideFastestLeaderboardID":82305,
        "SecondSideID": CaoCaoForcesFactionID, 
    },
    {
        "ID": BattleOfChangBanStageID, 
        "FirstSideID": LiuBeiForcesFactionID, 
        "FirstSideAchievementID": 370391,
        "FirstSideKillLeaderboardID": 82306,
        "FirstSideFastestLeaderboardID":82307,
        "SecondSideAchievementID": 370392,
        "SecondSideKillLeaderboardID": 82308,
        "SecondSideFastestLeaderboardID":82309,
        "SecondSideID": CaoCaoForcesFactionID, 
    },
    {
        "ID": BattleOfChiBiStageID, 
        "FirstSideID": AlliedForcesFactionID, 
        "FirstSideAchievementID": 370423,
        "FirstSideKillLeaderboardID": 82310,
        "FirstSideFastestLeaderboardID":82311,
        "SecondSideAchievementID": 370393,
        "SecondSideKillLeaderboardID": 82312,
        "SecondSideFastestLeaderboardID":82313,
        "SecondSideID": CaoCaoForcesFactionID,
    },
    {
        "ID": AssaultOnChengDuStageID, 
        "FirstSideID": LiuBeiForcesFactionID, 
        "FirstSideAchievementID": 370394,
        "FirstSideKillLeaderboardID": 82316,
        "FirstSideFastestLeaderboardID":82317,
        "SecondSideAchievementID": 370395,
        "SecondSideKillLeaderboardID": 82318,
        "SecondSideFastestLeaderboardID":82319,
        "SecondSideID": LiuZhangForcesFactionID, 
        "NormalSecondAchievementID": 370396 // creates an achievement for the second faction.
    },
    {
        "ID": BattleAtTongGateStageID, 
        "FirstSideID": AlliedForcesFactionID, 
        "FirstSideAchievementID": 370397,
        "FirstSideKillLeaderboardID": 82320,
        "FirstSideFastestLeaderboardID":82321,
        "SecondSideAchievementID": 370398,
        "SecondSideKillLeaderboardID": 82322,
        "SecondSideFastestLeaderboardID":82323,
        "SecondSideID": CaoCaoForcesFactionID, 
    },
    {
        "ID": BattleAtHeFeiStageID, 
        "FirstSideID": WeiForcesFactionID, 
        "FirstSideAchievementID": 370399,
        "FirstSideKillLeaderboardID": 82324,
        "FirstSideFastestLeaderboardID":82325,
        "SecondSideAchievementID": 370400,
        "SecondSideKillLeaderboardID": 82326,
        "SecondSideFastestLeaderboardID":82327,
        "SecondSideID": WuForcesFactionID, 
    },
    {
        "ID": BattleAtFanCastleStageID, 
        "FirstSideID": ShuForcesFactionID, 
        "FirstSideAchievementID": 370401,
        "FirstSideKillLeaderboardID": 82328,
        "FirstSideFastestLeaderboardID":82329,
        "SecondSideAchievementID": 370424,
        "SecondSideKillLeaderboardID": 82330,
        "SecondSideFastestLeaderboardID":82331,
        "SecondSideID": AlliedForcesFactionID
    },
    {
        "ID": BattleOfMtDingJunStageID, 
        "FirstSideID": ShuForcesFactionID, 
        "FirstSideAchievementID": 370402,
        "FirstSideKillLeaderboardID": 82334,
        "FirstSideFastestLeaderboardID":82335,
        "SecondSideAchievementID": 370403,
        "SecondSideKillLeaderboardID": 82336,
        "SecondSideFastestLeaderboardID":82337,
        "SecondSideID": WeiForcesFactionID, 
    },
    {
        "ID": BattleAtYiLingStageID, 
        "FirstSideID": ShuForcesFactionID, 
        "FirstSideAchievementID": 370404,
        "FirstSideKillLeaderboardID": 82338,
        "FirstSideFastestLeaderboardID":82339,
        "SecondSideAchievementID": 370405,
        "SecondSideKillLeaderboardID": 82340,
        "SecondSideFastestLeaderboardID":82341,
        "SecondSideID": WuForcesFactionID, 
    },
    {
        "ID": NanmanCampaignStageID, 
        "FirstSideID": ShuForcesFactionID, 
        "FirstSideAchievementID": 370406,
        "FirstSideKillLeaderboardID": 82342,
        "FirstSideFastestLeaderboardID":82343,
        "SecondSideAchievementID": 370407,
        "SecondSideKillLeaderboardID": 82344,
        "SecondSideFastestLeaderboardID":82345,
        "SecondSideID": WuForcesFactionID, 
        "ThirdSideID": NanmanForcesFactionID,
        "ThirdSideAchievementID": 370408,
        "ThirdSideKillLeaderboardID": 82346,
        "ThirdSideFastestLeaderboardID":82347,
        "NormalThirdAchievementID": 370409 // creates an achievement for the third faction.
    },
    {
        "ID": BattleOfJieTingStageID, 
        "FirstSideID": ShuForcesFactionID, 
        "FirstSideAchievementID": 370410,
        "FirstSideKillLeaderboardID": 82348,
        "FirstSideFastestLeaderboardID":82349,
        "SecondSideAchievementID": 370411,
        "SecondSideKillLeaderboardID": 82350,
        "SecondSideFastestLeaderboardID":82351,
        "SecondSideID": WeiForcesFactionID, 
    },
    {
        "ID": BattleAtYouTingStageID, 
        "FirstSideID": WeiForcesFactionID, 
        "FirstSideAchievementID": 370412,
        "FirstSideKillLeaderboardID": 82352,
        "FirstSideFastestLeaderboardID":82353,
        "SecondSideAchievementID": 370413,
        "SecondSideKillLeaderboardID": 82354,
        "SecondSideFastestLeaderboardID":82355,
        "SecondSideID": WuForcesFactionID, 
    },
    {
        "ID": SiegeAtHeFeiCastleStageID, 
        "FirstSideID": WeiForcesFactionID, 
        "FirstSideAchievementID": 370414,
        "FirstSideKillLeaderboardID": 82356,
        "FirstSideFastestLeaderboardID":82357,
        "SecondSideAchievementID": 370415,
        "SecondSideKillLeaderboardID": 82358,
        "SecondSideFastestLeaderboardID":82359,
        "SecondSideID": WuForcesFactionID, 
    },
    {
        "ID": BattleAtWuZhangPlainsStageID, 
        "FirstSideID": ShuForcesFactionID, 
        "FirstSideAchievementID": 370416,
        "FirstSideKillLeaderboardID": 82360,
        "FirstSideFastestLeaderboardID":82361,
        "SecondSideAchievementID": 370417,
        "SecondSideKillLeaderboardID": 82362,
        "SecondSideFastestLeaderboardID":82363,
        "SecondSideID": WeiForcesFactionID, 
    },
    {
        "ID": MountainBanditCampaignStageID, 
        "AchievementID": 370418,
        "KillLeaderboardID": 82364,
        "FastestLeaderboardID": 82365
        // No Factions needed 
    },
    {
        "ID": RaidontheRogueFortressStageID, 
        "AchievementID": 370419,
        "KillLeaderboardID": 82366,
        "FastestLeaderboardID": 82367
        // No Factions needed 
    },
    {
        "ID": PirateAttackontheHighSeasStageID, 
        "AchievementID": 370420,
        "KillLeaderboardID": 82368,
        "FastestLeaderboardID": 82369
        // No Factions needed 
    }
]

// “Beat a Hard mode level with a rank 16 character”  (Missable, and will guard against 2p being above a rank 16 as well, you need to take a completely fresh character to beat this. ) 
achievement("Nothing Gonna Stop Me",
            "Beat a level on Hard as a character with no experience points at Rank 16" + asASinglePlayerString, 
            3,
            trigger = MusouModeOrFreeMode() &&
                      hardModeCheck() &&
                      triggerJustWonStageCheck() &&
                      firstPlayerNoExperience() &&
                      !isTwoPlayerMode() &&
                      saveProtection() &&
                      requireInGame(), // This shows up as you set up the next stage if you set the difficulty to hard in the previous one. 
            id = 370360
                      
)

function createFeastAchievement()
{
    possibleHits = false
    
    for index in range(ZhaoYun, NuWa) // Anything more than this. and it's going to hit the location of the number of collected memory space. 
    {
        // get the locations we're going to hit. 
        healthLocation = ZhaoYunHealthLocation + index * SizeOfStoredCharacters
        musouLocation = ZhaoYunMusouLocation + index * SizeOfStoredCharacters

        possibleHits = possibleHits || 
            ( 
                byte(healthLocation) == prev(byte(healthLocation)) + 20 &&
                byte(musouLocation) == prev(byte(musouLocation)) + 20
            )
        
    }
    achievement("A Feast Fit for Xu Zhu",
        "Enjoy two Dim Sums and two Musou Wines in one stage and complete it" + asASinglePlayerString + "; beware if you're already stuffed (near max Health or Musou), you won't be able to enjoy them",
        2,
        trigger = MusouModeOrFreeMode() &&
                  wonStageCheck() &&
                  !isTwoPlayerMode() &&
                  saveProtection() &&
                  possibleHits,
        id = 370361   
    )
}

createFeastAchievement()


// “True Legend of the Three Kingdoms”  Beat 1000 enemies on a single level on Hard difficulty.
achievement("True Legend of the Three Kingdoms",
            "Earn 1000 kills on Hard and finish the stage" + asASinglePlayerString, 
            5,
            trigger = MusouModeOrFreeMode() &&
                      hardModeCheck() &&
                      justWonStageCheck() &&
                      getFirstPlayerStageKillCount() >= 1000 &&
                      !isTwoPlayerMode(),
            id = 370362
                      
)

achievement("All According to Wang Yun’s Plan",
            "Kill Dong Zhuo at The Battle of Hu Lao Gate as Lu Bu, but avoid killing your love, Diao Chan" + onePlayerString, 
            2,
            trigger = MusouModeOrFreeMode() &&
                      checkFirstPlayerCharacterIndex(LuBu) &&
                      checkStageID(BattleAtHuLaoGateStageID) &&
                      checkFactionID(AlliedForcesFactionID) &&
                      !checkIfGeneralKilledByFirstPlayer(DiaoChan) &&
                      trigger_when(checkIfGeneralKilledByFirstPlayer(DongZhuo)) &&
                      triggerJustWonStageCheck() && 
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370363
)


// - Complete -Insert Night Time Stage- as Diaochan in Free Mode
//Diaochan was part of the four great beauties of Ancient China and each had an idiom to their name with her's being "Diaochan eclipses the moon"
achievement("Diao Chan Eclipses the Moon",
            "Complete The Battle at Wu Zhang Plains on any side as Diao Chan in Free Mode" + asASinglePlayerString, 
            3,
            trigger = MusouModeOrFreeMode() &&
                      checkStageID(BattleAtWuZhangPlainsStageID) &&
                      checkFirstPlayerCharacterIndex(DiaoChan) &&
                      triggerJustWonStageCheck()&&
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370365
)

// Nanman Jackpot - Defeat 7 Officers as Meng Huo during Battle of Nanman with the last being Zhuge Liang.
// Meng Huo was famously captured by Zhuge Liang during the Southern Campaign (Battle of Nanman) Seven Times.
achievement("Nanman Jackpot",
            "Defeat exactly 7 officers as Meng Huo during The Nanman Campaign with the Nanman Forces"  + asASinglePlayerString + " (Kills must be done by the player, bodyguard and other kills will not count)", 
            2,
            trigger = MusouModeOrFreeMode() &&
                      checkStageID(NanmanCampaignStageID) &&
                      checkFactionID(NanmanForcesFactionID) &&
                      checkFirstPlayerCharacterIndex(MengHuo) &&
                      !checkNumberGeneralKilled(8) && 
                      trigger_when(checkNumberGeneralKilled(7)) && 
                      triggerJustWonStageCheck() &&
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370366
)

// The Fire Deity Incinerates Chi Bi - Trigger the flame attack in The Battle at Chi Bi as Zhurong
// A key factor of The Battle of Chi Bi is the fire spreading through Cao Cao's ships.
achievement("The Fire Deity Incinerates Chi Bi",
            "Ignite Cao Cao's ships as Zhu Rong in Free Mode at The Battle of Chi Bi" + asASinglePlayerString, 
            1,
            trigger = MusouModeOrFreeMode() &&
                      checkFirstPlayerCharacterIndex(ZhuRong) &&
                      checkStageID(BattleOfChiBiStageID) &&
                      ( 
                        checkFactionID(AlliedForcesFactionID)
                      ) &&
                      trigger_when(
                        CutsceneIndicator() == VALUE_FOR_CUTSCENE_PLAYING && 
                        CutsceneIndex() == VALUE_FOR_CHIBI_FIRE_SCENE) &&
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370367
)

// He Dong What? - Complete The Battle of Changban (Liu Bei) as Dong Zhuo
// Dong Zhuo I've had some trouble thinking of anything for him, so I came up with the idea of playing him during a stage that is the opposite of his personality of being the most evil guy. The Battle of Changban is the battle where Zhao Yun famously rescued Liu Shan from Cao Cao's army.
achievement("He Dong What?",
            "Complete The Battle of Chang Ban with Liu Bei's Forces in Free Mode as Dong Zhuo" + asASinglePlayerString, 
            2,
            trigger = MusouModeOrFreeMode() &&
                      checkFirstPlayerCharacterIndex(DongZhuo) &&
                      checkStageID(BattleOfChangBanStageID) &&
                      checkFactionID(LiuBeiForcesFactionID) &&
                      triggerJustWonStageCheck() &&
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370364
)


// The Way of Peace - Complete The Yellow Turban stage as Zhang Jiao only defeating the necessary enemy generals
// The book that is said to have inspired Zhang Jiao to start the Yellow Turban rebellion was called The Way of Peace
achievement("The Way of Peace",
            "Complete The Yellow Turban Rebellion as Zhang Jiao in Free Mode only killing the necessary enemy officers and no one else" + asASinglePlayerString, 
            1,
            trigger = MusouModeOrFreeMode() &&
                      checkStageID(YellowTurbanRebellionStageID) &&
                      checkFirstPlayerCharacterIndex(ZhangJiao) &&
                      firstPlayerKills() < 2 &&
                      trigger_when(
                        firstPlayerKills() == 1 &&
                        checkIfGeneralKilledByFirstPlayer(HeJin)
                        ) &&
                      triggerJustWonStageCheck() &&
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370368
)

achievement("I Brought You Into This World, Now I’m Taking You Out of It",
            "In Challenge Mode, kill at least 1000 enemies in Endurance as Fu Xi or Nu Wa" + asASinglePlayerString, 
            5,  // Grindy but not hard. 
            trigger = ChallengeModeOnly() &&
                      CurrentCutsceneLevelIndex() == ChallengeModeEnduranceLevelCutsceneID &&               
                      trigger_when(firstPlayerKills() >= 1000) &&
                      triggerJustWonStageCheck() &&
                      (
                        checkFirstPlayerCharacterIndex(FuXi) ||
                        checkFirstPlayerCharacterIndex(NuWa)
                      ) &&
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370369
)


achievement("Raining Death",
            "In Challenge Mode, finish a Time Attack in less than 4 minutes" + asASinglePlayerString, 
            10, // Time attack time is VERY tight.  If you look up videos, be careful, XL has players gain levels, DW 3 does not.   This could even be 25.
            trigger = ChallengeModeOnly() &&
                      CurrentCutsceneLevelIndex() == ChallengeModeTimeAttackLevelCutsceneID &&               
                      triggerJustWonStageCheck() &&
                      getFramesElapsed() <= (4 * 60) * 60 &&  // 4 minutes.  But in frame time. 
                      !isTwoPlayerMode() &&
                      requireInGame(),
            id = 370370
)

function createNormalPlayStageAchievement(stage, factionID, achievementID)
{
    factionName = FactionNameLookup[factionID]
    factionForces = FactionForcesLookup[factionID]
    achievement( format("{0} ({1})", StageLookup[stage["ID"]], factionName), 
                format("Complete {0} as the {1}{2}", StageLookup[stage["ID"]], factionForces, asASinglePlayerString),
                1, 
                trigger = FreeModeOnly() &&
                        never(onMainMenu()) &&
                        triggerJustWonStageCheck() &&
                        checkStageID(stage["ID"]) &&
                        checkFactionID(factionID) &&
                        !isTwoPlayerMode() &&
                        requireInGame(),
                id = achievementID
                )
                
}



function CreateAchievementsForStage(stage, achievementID, killLeaderboardsID, fastestLeaderboardsID)
{
    // Create achievements for a stages with only one playable faction
    // 
    // state: a dictionary of stage information. 
    
    achievement(format("Ultimate Challenge: {0}", StageLookup[stage["ID"]]), 
                format("Beat {0} on Hard without using an interim save" + asASinglePlayerString, StageLookup[stage["ID"]]),
                5, 
                trigger =                                         MusouModeOrFreeMode() &&
                        hardModeCheck() &&
                        triggerJustWonStageCheck() &&
                        checkStageID(stage["ID"]) &&
                        !isTwoPlayerMode() &&
                        never(!(checkStageID(stage["ID"]))) &&
                        never(onMainMenu()) &&
                        once(getFramesElapsed() == 1), // make sure 1 second has elapsed at some point.    
                id = achievementID
                )
    
    // I also intend to create leaderboards for each stage.  There’s 23 stages, 2 sides per stage, (3 stages can only be played 1 way) that’s 43 potential stages/sides pairings .  I’m considering 2 leaderboards per stage.  “Most kills” and “Fastest playthrough”  that’s 86 leaderboards.

    leaderboard(
        title = format("Most Kills on {0}",  StageLookup[stage["ID"]]),
        description = format("Get the most kills on {0} and win the stage" + asASinglePlayerString,  StageLookup[stage["ID"]]),
        start = 
        (
            MusouModeOrFreeMode() &&
            checkStageID(stage["ID"])&&
            !isTwoPlayerMode() &&
            justWonStageCheck()

        ),
        cancel = always_false(),
        submit = always_true(),
        value = getFirstPlayerStageKillCount(),
        format = "VALUE", 
        id = killLeaderboardsID
    )

    leaderboard(
        title = format("Fastest Run on Stage {0}", StageLookup[stage["ID"]]),
        description = format("Get through the stage {0} the fastest" + asASinglePlayerString,  StageLookup[stage["ID"]]),
        
        start  =
        (
            MusouModeOrFreeMode() &&
            checkStageID(stage["ID"])&&
            !isTwoPlayerMode() &&
            justWonStageCheck()
        ),
        cancel = always_false(),
        submit = always_true(),
        value = getFramesElapsed()/60,
        format = "SECS", 
        lower_is_better = true, 
        id = fastestLeaderboardsID
    )
}

function CreateAchievementsForStageFaction(stage, factionID, achievementID, killLeaderboardsID, fastestLeaderboardsID)
{
    // Create achievements for a stage faction pair.  
    // 
    // state: a dictionary of stage information. 
    // factionID: the target faction ID
    
    if (factionID != NoFactionID)
    {
        factionName = FactionNameLookup[factionID]
        factionForces = FactionForcesLookup[factionID]
        achievement( format("Ultimate Challenge: {0}({1})", StageLookup[stage["ID"]], factionName), 
                    format("Beat {0} with the {1} on Hard without using an interim save"+ asASinglePlayerString + " (Free Mode available)", StageLookup[stage["ID"]], factionForces),
                    5, 
                    trigger = MusouModeOrFreeMode() &&
                            hardModeCheck() &&
                            triggerJustWonStageCheck() &&
                            checkStageID(stage["ID"]) &&
                            checkFactionID(factionID) &&
                            !isTwoPlayerMode() &&
                            never(onMainMenu()) &&
                            never(!(checkStageID(stage["ID"]))) &&
                            once(getFramesElapsed() == 1), // make sure 1 second has elapsed at some point. 
                    id = achievementID

                            
                    )
        
        // I also intend to create leaderboards for each stage.  There’s 23 stages, 2 sides per stage, (3 stages can only be played 1 way) that’s 43 potential stages/sides pairings .  I’m considering 2 leaderboards per stage.  “Most kills” and “Fastest playthrough”  that’s 86 leaderboards.

        leaderboard(
            title = format("Most Kills in {0} With {1}",  StageLookup[stage["ID"]], factionName),
            description = format("Get the most kills on {0} on the {1} and win the stage" + asASinglePlayerString,  StageLookup[stage["ID"]], factionForces),
            start = 
            (
                MusouModeOrFreeMode() &&
                checkStageID(stage["ID"])&&
                checkFactionID(factionID) &&
                !isTwoPlayerMode() &&
                justWonStageCheck()

            ),
            cancel = always_false(),
            submit = always_true(),
            value = getFirstPlayerStageKillCount(),
            format = "VALUE",
            id = killLeaderboardsID
        )

        leaderboard(
            title = format("Fastest Run on Stage {0} With {1}", StageLookup[stage["ID"]], factionName),
            description = format("Get through the stage {0} on the {1} the fastest" + asASinglePlayerString,  StageLookup[stage["ID"]], factionForces),
            
            start  =
            (
                MusouModeOrFreeMode() &&
                checkStageID(stage["ID"])&&
                checkFactionID(factionID) &&
                !isTwoPlayerMode() &&
                justWonStageCheck()
            ),
            cancel = always_false(),
            submit = always_true(),
            value = getSecondsElapsed(),
            format = "SECS", 
            lower_is_better = true, 
            id = fastestLeaderboardsID
        )
    }    
}

// Beat each level on each side with out in game save, on hard. 
for stage in stageArray
{ 
    if (ContainsKey(stage, "FirstSideID"))
    {
        CreateAchievementsForStageFaction(stage, stage["FirstSideID"], stage["FirstSideAchievementID"], stage["FirstSideKillLeaderboardID"], stage["FirstSideFastestLeaderboardID"])
        if (ContainsKey(stage, "SecondSideID"))
        {
            CreateAchievementsForStageFaction(stage, stage["SecondSideID"], stage["SecondSideAchievementID"], stage["SecondSideKillLeaderboardID"], stage["SecondSideFastestLeaderboardID"])
        }
        if (ContainsKey(stage, "ThirdSideID"))
        {
            CreateAchievementsForStageFaction(stage, stage["ThirdSideID"], stage["ThirdSideAchievementID"], stage["ThirdSideKillLeaderboardID"], stage["ThirdSideFastestLeaderboardID"])
        }
    }
    else 
    {
        CreateAchievementsForStage(stage, stage["AchievementID"], stage["KillLeaderboardID"], stage["FastestLeaderboardID"])
    }

    // 3-4 “Beat a specific free play level on X side”  (These are levels that don’t appear in any musou mode.) 
    if (ContainsKey(stage, "NormalFirstAchievementID") && stage["NormalFirstAchievementID"] != 0)
    {
        createNormalPlayStageAchievement(stage, stage["FirstSideID"], stage["NormalFirstAchievementID"])        
    }
    if (ContainsKey(stage, "NormalSecondAchievementID") && stage["NormalSecondAchievementID"] != 0)
    {
        createNormalPlayStageAchievement(stage, stage["SecondSideID"], stage["NormalSecondAchievementID"])
    }
    if (ContainsKey(stage, "NormalThirdAchievementID") && stage["NormalThirdAchievementID"] != 0)
    {
        createNormalPlayStageAchievement(stage, stage["ThirdSideID"], stage["NormalThirdAchievementID"])        
    }
}

achievement("So That’s What Everyone Else Was Doing", 
            "Play the secret ending for independent officers",
            1, 
            // This could be harder, but really if this is playing in any format, this is the video, and I believe it only plays from opening edit. 
            trigger = isSecretEndingPlaying() &&
                      isFMVCutscenePlaying(),
            id = 370421
)


// “Beat a level without letting your health drop below 50 percent”  Could be done with UI elements, but considering using a pointer here just to demonstrate that, even if it’s a  less efficent way to do so. 
achievement( format("None of You Are Even Half as Good as Me"), 
             format("Beat a level with no less than 50 percent Health on Normal or Hard without an interim save" + asASinglePlayerString),
             3, 
             trigger = normalOrHardCheck() &&
                       triggerJustWonStageCheck() &&
                       !isTwoPlayerMode() &&
                       once(getFramesElapsed() == 1)  && // make sure 1 second has elapsed at some point. 
                       never(firstPlayerHalfHP()) &&
                       never(!(MusouModeOnly() || FreeModeOnly())) &&
                       never(onMainMenu()) &&
                       !inDemoCurrently(), // This shows up in demos if you set the difficulty to hard or Normal. 
            id = 370422
                           
            )


function getMusouModeTotalKOs()
{
    // IT's acceptable to look at stage 8,9,10 even if we only need 7, because all data is wiped between musous/loads
    // This will almost definitely not be above a word, but it's a dword space.
    return sum_of(range(0, 10 - 1), target_index => dword(MemoryLocationOfFirstStagesKOTotal + SizeOfPostGameStageData * target_index))
}

function calcGeneralKill(FirstGeneralMemoryLocation, targetGeneralIndex)
{
    return byte(FirstGeneralMemoryLocation + (SizeOfKilledGenerals * targetGeneralIndex)) / NoGeneral 
}
function getMusouModeGeneralKills( musouStages )
{
    // This will find all the Generals killed 
    // This must respect how ever many musou stages are complete.  Additional stages are all set to 0x00. 
    // In addition this was originally a tally, however tally_of would count every value a second time if a player finished a second musou mode. 
    // Might be ways to fix it, but this will always work and avoid that issue.
   totalChecks = musouStages * 20
   return totalChecks - sum_of(range(0, totalChecks - 1), targetGeneralIndex => calcGeneralKill(MemoryLocationOfPostGameGeneralKilledArrayFirstStage + SizeOfPostGameStageData * (targetGeneralIndex / 20), 
                                                                                                targetGeneralIndex % 20 ))
       
}

leaderboard(
    title = format("Most Kills for a 7 Stage Musou Mode"),
    description = format("Get the most total kills across each stage of Musou Mode (No Sun Jian, Liu Bei, or Cao Cao; only first player kills are counted)"),
    start = 
    (
        CurrentStagesCompleteMusouMode() == 7 && 
        prev(CurrentStagesCompleteMusouMode()) == 6 &&
        !checkFirstPlayerCharacterIndex(SunJian) &&
        !checkFirstPlayerCharacterIndex(CaoCao) &&
        !checkFirstPlayerCharacterIndex(LiuBei) &&
        wonStageCheck() && 
        !isTwoPlayerMode() &&
        saveProtection() // Doubt this is needed, but why not? 
        
    ),
    cancel = always_false(),
    submit = always_true(),
    value = measured(getMusouModeTotalKOs()),
    format = "VALUE",
    id = 82370
)

leaderboard(
    title = format("Most Officer Kills for a 7 Stage Musou Mode"),
    description = format("Get the most total officer kills across each stage of Musou Mode (No Sun Jian, Liu Bei, or Cao Cao; only first player kills not duplicated in the same level are counted)"),
    start = 
    (
        CurrentStagesCompleteMusouMode() == 7 && 
        prev(CurrentStagesCompleteMusouMode()) == 6 &&
        !checkFirstPlayerCharacterIndex(SunJian) &&
        !checkFirstPlayerCharacterIndex(CaoCao) &&
        !checkFirstPlayerCharacterIndex(LiuBei) &&
        wonStageCheck() && 
        !isTwoPlayerMode() &&
        saveProtection() // Doubt this is needed, but why not? 
        
    ),
    cancel = always_false(),
    submit = always_true(),
    value = measured(getMusouModeGeneralKills(7)),
    format = "VALUE",
    id = 82374
)

leaderboard(
    title = format("Most Kills for a 10 Stage Musou Mode"),
    description = format("Get the most total kills across each stage of Musou Mode (Sun Jian, Liu Bei, or Cao Cao; only first player kills are counted)"),
    start = 
    (
        CurrentStagesCompleteMusouMode() == 10 && 
        prev(CurrentStagesCompleteMusouMode()) == 9 &&
        (
            checkFirstPlayerCharacterIndex(SunJian) ||
            checkFirstPlayerCharacterIndex(CaoCao) ||
            checkFirstPlayerCharacterIndex(LiuBei) 
        ) &&
        wonStageCheck() && 
        !isTwoPlayerMode() &&
        saveProtection() // Doubt this is needed, but why not? 

    ),
    cancel = always_false(),
    submit = always_true(),
    value = getMusouModeTotalKOs(),
    format = "VALUE",
    id = 82371
)

leaderboard(
    title = format("Most Officer Kills for a 10 Stage Musou Mode"),
    description = format("Get the most total officer kills across each stage of Musou Mode (Sun Jian, Liu Bei, or Cao Cao; only first player kills not duplicated in the same level are counted)"),
    start = 
    (
        CurrentStagesCompleteMusouMode() == 10 && 
        prev(CurrentStagesCompleteMusouMode()) == 9 &&
        (
            checkFirstPlayerCharacterIndex(SunJian) ||
            checkFirstPlayerCharacterIndex(CaoCao) ||
            checkFirstPlayerCharacterIndex(LiuBei) 
        ) &&
        wonStageCheck() && 
        !isTwoPlayerMode() &&
        saveProtection() // Doubt this is needed, but why not? 
        
    ),
    cancel = always_false(),
    submit = always_true(),
    value = getMusouModeGeneralKills(10),
    format = "VALUE",
    id = 82375
)

leaderboard(
    title = format("Most Kills in Challenge Mode Endurance"),
    description = format("In Challenge Mode, get the most kills in a single Endurance run" + asASinglePlayerString),
    start = 
    (
        ChallengeModeOnly() &&
        CurrentCutsceneLevelIndex() == ChallengeModeEnduranceLevelCutsceneID &&               
        justWonStageCheck() &&
        !isTwoPlayerMode()
    ),
    cancel = always_false(),
    submit = always_true(),
    value = firstPlayerKills(),
    format = "VALUE",
    id = 82372
)

leaderboard(
    title = format("Fastest Time to Finish Challenge Mode Time Attack"),
    description = format("In Challenge Mode, complete Time Attack as fast as possible" + asASinglePlayerString),
    start = 
    (
        ChallengeModeOnly() &&
        CurrentCutsceneLevelIndex() == ChallengeModeTimeAttackLevelCutsceneID &&               
        justWonStageCheck() &&
        !isTwoPlayerMode()
        

    ),
    cancel = always_false(),
    submit = always_true(),
    value = getSecondsElapsed(),
    format = "VALUE", 
    lower_is_better = true,
    id = 82373
)


////////////////////////////////
//  Rich Presence
////////////////////////////////


// Thought about showing KOs and more here, but chosing not to. 

// FUTURETODO: See if stage_ID can be check with a different location 

// Main Menu or not in any mode?   Menus
rich_presence_conditional_display(GameplayMode() == MainMenu || isOptionMode(), "In Menus")

// Demo check 
// Note: This will misfire sometimes, due to watching a demo, however once the player enters the real game, this will be cleaned up. 
rich_presence_conditional_display(inDemoCurrently(), "Watching Demos")

// Versus mode             is playing Versus.
rich_presence_conditional_display(GameplayMode() == VersusMode, "In Versus Mode")

// If in unknown stage, but not actually in the end of stage screen. 
rich_presence_conditional_display( CurrentStageID() == END_OF_STAGE_STAGE_ID && !currentFrameEndOfStageHit(), "In Menus")

// Challenge mode Endurance         Character, is testing his strength killing as many as he can. 
// Challenge mode Time attack       Character, is testing his strength killing as many as he can. 
rich_presence_conditional_display(GameplayMode() == ChallengeMode, "{0} is testing their strength in {1} mode",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("ChallengeType", CurrentCutsceneLevelIndex(), ChallengeModeLookup))

rich_presence_conditional_display(MusouModeOnly() && 
                                  isTwoPlayerMode() && 
                                    (CurrentStagesCompleteMusouMode() == 10 || 
                                         (!isFactionLeader(FirstPlayerCharacterIndex()) && 
                                         CurrentStagesCompleteMusouMode() == 7)),
                                  "{0} has finished their Musou Mode with some help from {1}",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup),
                                  rich_presence_lookup("Character", SecondPlayerCharacterIndex(), CharacterLookup))


rich_presence_conditional_display(MusouModeOnly() && 
                                    (CurrentStagesCompleteMusouMode() == 10 || 
                                        (!isFactionLeader(FirstPlayerCharacterIndex()) && 
                                         CurrentStagesCompleteMusouMode() == 7)),
                                  "{0} has finished their Musou Mode",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup))


// stage won 2 player  But Stage ID is unknown.  Use prior.       1 Player character, and 2 player character has finished Stage name, difficulty.  
rich_presence_conditional_display(MusouModeOrFreeMode() && wonStageCheck() && isTwoPlayerMode() && currentFrameEndOfStageHit() && inPostStageScreen(), "{0} and {1} has finished {2} ({3}):  Difficulty {4}",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Character", SecondPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Stage", CurrentLevelPauseID(), StageLookup),
                                  rich_presence_lookup("Faction", CurrentPlayerFactionID(), FactionNameLookup),
                                  rich_presence_lookup("Difficulty", InGameDifficultySelection(), DifficultyLookup))

// In stage 2 player       1 Player character, and 2 player character is fighting in Stage name, difficulty.  
rich_presence_conditional_display(MusouModeOrFreeMode() && isTwoPlayerMode(), "{0} and {1} is fighting through {2} ({3}):  Difficulty {4}",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Character", SecondPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Stage", CurrentLevelPauseID(), StageLookup),
                                  rich_presence_lookup("Faction", CurrentPlayerFactionID(), FactionNameLookup),
                                  rich_presence_lookup("Difficulty", InGameDifficultySelection(), DifficultyLookup))


// Full Musou Mode won 1 player      1 Player character has finished Stage name, difficulty.  
rich_presence_conditional_display(MusouModeOrFreeMode() && wonStageCheck() && inPostStageScreen(), "{0} has finished {1} ({2}):  Difficulty {3}",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Stage", CurrentLevelPauseID(), StageLookup),
                                  rich_presence_lookup("Faction", CurrentPlayerFactionID(), FactionNameLookup),
                                  rich_presence_lookup("Difficulty", InGameDifficultySelection(), DifficultyLookup))


// stage won 1 player      1 Player character has finished Stage name, difficulty.  
rich_presence_conditional_display(MusouModeOrFreeMode() && wonStageCheck() && !isFMVCutscenePlaying(), "{0} has finished {1} ({2}):  Difficulty {3}",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Stage", CurrentLevelPauseID(), StageLookup),
                                  rich_presence_lookup("Faction", CurrentPlayerFactionID(), FactionNameLookup),
                                  rich_presence_lookup("Difficulty", InGameDifficultySelection(), DifficultyLookup))

// In stage 1 player       1 Player character is fighting in Stage name, difficulty.  
rich_presence_conditional_display(MusouModeOrFreeMode(), "{0} is fighting through {1} ({2}):  Difficulty {3}",
                                  rich_presence_lookup("Character", FirstPlayerCharacterIndex(), CharacterLookup), 
                                  rich_presence_lookup("Stage", CurrentLevelPauseID(), StageLookup),
                                  rich_presence_lookup("Faction", CurrentPlayerFactionID(), FactionNameLookup),
                                  rich_presence_lookup("Difficulty", InGameDifficultySelection(), DifficultyLookup))

// Unknown 
rich_presence_display("In Menus.") //Intentionally slightly different to say "issue with RP, with out saying issue with RP"

//////////////////////////////
// Achievement confirmed
//////////////////////////////

// "The gang's all here."

// 1 kill 1 level can be done in Chi Bi, and many others.

// “True Legend of the Three Kingdoms”  Beat 1000 enemies on a single level on hard difficulty.

//////////////////////////////
// Achievement confirmed one of. 
//////////////////////////////

// Beat each level on each side with out in game save, on hard. 
// Some sides combine for the forces. 
// 36 “Complete Musou mode.”
// 36 “Complete Musou Mode on hard”
// 41 characters “Earn the fourth weapon”  Simple names “Unlock Green Dragon” or such. 

// 12 Collect rare items (12 items that require specific requirements)
// Potentially around 30 “unlock characters”.  Characters unlock in a set order, but are not tied to specific Musou Modes.   (There are some unlocks given from having a DW2 save or just normal gameplay, , those will be grouped together and awarded as a bulk set, not requiring the DW 2 save but given immediately if you have that) “Probably simple names “Unlock X”   Some of these will be combined as well if they unlock at the same point”
// 1 Collect all other weapons (or 2 being collect all level 2 weapons, collect all level 3 weapons, should be done with add hits) 
// 1 Collect minor items (Accesories (Should use Add Hits)) 
// “Beat a Hard mode level with a rank 16 character”  (Missable, and will guard against 2p being above a rank 16 as well, you need to take a completely fresh character to beat this. ) 
// Secret Ending
// I also intend to create leaderboards for each stage.  There’s 23 stages, 2 sides per stage, (3 stages can only be played 1 way) that’s 43 potential stages/sides pairings .  I’m considering 2 leaderboards per stage.  “Most kills” and “Fastest playthrough”  that’s 86 leaderboards.
// “Beat a level without letting your health drop below 50 percent”  Could be done with UI elements, but considering using a pointer here just to demonstrate that, even if it’s a  less efficent way to do so. 
// 3-4 “Beat a specific free play level on X side”  (These are levels that don’t appear in any musou mode.) 

// Lubu Killing Dong Zhuo (Any point, but I believe it has to be Hu lao gate on the allied side). feels right to show proper history.

//////////////////////////////
// Achievements written 
//////////////////////////////


// Diaochan Eclipses The Moon - Complete -Insert Night Time Stage- as Diaochan in Free Mode
// Diaochan was part of the four great beauties of Ancient China and each had an idiom to their name with her's being "Diaochan eclipses the moon"

// Nanman Jackpot - Defeat 7 Officers as Meng Huo during Battle of Nanman with the last being Zhuge Liang.
// Meng Huo was famously captured by Zhuge Liang during the Southern Campaign (Battle of Nanman) Seven Times.

// The Fire Deity Incinerates Chi Bi - Trigger the flame attack in The Battle at Chi Bi as Zhurong
// A key factor of The Battle of Chi Bi is the fire spreading through Cao Cao's ships.

// He Dong What? - Complete The Battle of Changban (Liu Bei) as Dong Zhuo
// Dong Zhuo I've had some trouble thinking of anything for him, so I came up with the idea of playing him during a stage that is the opposite of his personality of being the most evil guy. The Battle of Changban is the battle where Zhao Yun famously rescued Liu Shan from Cao Cao's army.

// Leaderboards for most kills in a musou mode. 
// Leaderboards for most kill in a leader musou mode

// Leaderboards for most kill in a Challenge Endurance mode
// Leaderboards for most kill in a Challenge TIme Attack mode

// Rich presence


//////////////////////////////
// Achievements still to do. 
//////////////////////////////


//////////////////////////////
// Achievements on hold. 
//////////////////////////////

// Cover Challenge mode.
// Already so much here, maybe I'll come up with good values, but I have no clue what it would be.  Too high, and you have to power level to get it.  Too low and an endgame character wins it.   Maybe just play it, and get a good value.

// Get each of the three timed power ups in a session. 
// Feels a bit low effort

// “A better version of History”  Kill Shamoke with Gan Ning.  (Shamoke has been a focus of the fan community for a long time, if this can be in the game, well it’ll give true fans a chuckle I think) 
// When I do another and make a special achievement for EVERY character, maybe. 

// Guan Yu At Fan Castle cutscene.  There's a secret cutscene where Guan Yu references fighting himself. 
// Problem is it's hard to identify the exact cutscene.  It's the opening cutscene, but if you choose Wei you get a normal Wei cutscene, 
// and it's hard to differenciate those factions. They are both listed as "Allied Factions"  Also it's a one-off. 

//////////////////////////////
// Achievements killed
//////////////////////////////

// “Pacifist ... mostly" Beat a level killing only one major general”  (Code digging achievement, found a way to find out how many generals the player has killed) 
// Same as Way of peace, but way of peace is better. 

// 1 Collect Minor items and get max levels of them. 
// Tested, fully working, but holy crap, after playing a ton of levels I haven't maxed a single item yet.    For all 13?  Not fun. 

// Full Musou mode low kill counts.   I wanted this so much, but you can't prove the player has beaten all the levels with out a second player.  
// You'd have to force people to play the entire musou mode single player, no saving or loading, no deaths or failure.  That would suck.

// Final steps: 
// Need to check size of every memory location 
// NEED to check the value of every memory location 


//////////////////////////////
// Achievement Notes 
//////////////////////////////

// Common Items, Tier 2 and 3 Weapons allow two player mode because it would be impossible to block them.  
// Fourth weapons do have that limitation, but imagine getting every common item and getting the last one in multiplayer? 
// Also grinding for those items is a nightmare. 

// Secret Ending is very flimsy but I've been unable to trigger it in any other way, it might play naturally but if that's the case, 
// I didn't want to limit it to just the options menu. 

// Missable achievements: Fourth Weapon (You can't unlock a fourth weapon), and beating hard mode with a 0 experience character.
// Technically unlocking characters IS missable but only if you use a cheat code. 

// Most (unique) Officers killed for 7 stage and 10 stage
// Most average kills  in Challenge mode endurance.  (500 kills minimum)

// Known bug:  Nothing Gonna Stop Me trigger can show up in the demo screens.  It has been dealt with EXCEPT when someone uses a fast restart (Start + select) and then the custscene demo comes up before the gameplay demo. 
// Not fixing currently as it's unlikely to happen outside of a very specific set of steps, requiring hard mode and a fast restart, and will not be able to trigger there anyways. 



